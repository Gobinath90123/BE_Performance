<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Approve Estimation Quotation API">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Approve Estimation Quotation API" enabled="false">
        <stringProp name="ThreadGroup.num_threads">${THREAD_COUNT}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="THREAD_COUNT" elementType="Argument">
              <stringProp name="Argument.name">THREAD_COUNT</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc"></stringProp>
            </elementProp>
            <elementProp name="RAMP_UP" elementType="Argument">
              <stringProp name="Argument.name">RAMP_UP</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LOOP_COUNT" elementType="Argument">
              <stringProp name="Argument.name">LOOP_COUNT</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">PROTOCOL</stringProp>
              <stringProp name="Argument.value">https</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="BASE_URL" elementType="Argument">
              <stringProp name="Argument.name">BASE_URL</stringProp>
              <stringProp name="Argument.value">v10-integration.dev.api.test.benchmarkestimating.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="API_VERSION" elementType="Argument">
              <stringProp name="Argument.name">API_VERSION</stringProp>
              <stringProp name="Argument.value">v2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PORTFOLIO_TITLE" elementType="Argument">
              <stringProp name="Argument.name">PORTFOLIO_TITLE</stringProp>
              <stringProp name="Argument.value">Karan</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROGRAMME_TITLE" elementType="Argument">
              <stringProp name="Argument.name">PROGRAMME_TITLE</stringProp>
              <stringProp name="Argument.value">kl</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROJECT_TITLE" elementType="Argument">
              <stringProp name="Argument.name">PROJECT_TITLE</stringProp>
              <stringProp name="Argument.value">New Test Project</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ESTIMATE_TITLE" elementType="Argument">
              <stringProp name="Argument.name">ESTIMATE_TITLE</stringProp>
              <stringProp name="Argument.value">RETY</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="REGION_DESC" elementType="Argument">
              <stringProp name="Argument.name">REGION_DESC</stringProp>
              <stringProp name="Argument.value">North East</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="EstimatorName" elementType="Argument">
              <stringProp name="Argument.name">EstimatorName</stringProp>
              <stringProp name="Argument.value">Vijay Mishra</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OutputType" elementType="Argument">
              <stringProp name="Argument.name">OutputType</stringProp>
              <stringProp name="Argument.value">Discrete Operation and Maintenance Estimate</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LEVEL_OF_ESTIMATE_DESC" elementType="Argument">
              <stringProp name="Argument.name">LEVEL_OF_ESTIMATE_DESC</stringProp>
              <stringProp name="Argument.value">RIS Estimate</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PAGE_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">PAGE_NUMBER</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RESOURCE_CODE" elementType="Argument">
              <stringProp name="Argument.name">RESOURCE_CODE</stringProp>
              <stringProp name="Argument.value">AGG20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AREA_DESC" elementType="Argument">
              <stringProp name="Argument.name">AREA_DESC</stringProp>
              <stringProp name="Argument.value">Area 12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SCENARIO_DESC" elementType="Argument">
              <stringProp name="Argument.name">SCENARIO_DESC</stringProp>
              <stringProp name="Argument.value">Without Scheme</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="numberOfEstimates" elementType="Argument">
              <stringProp name="Argument.name">numberOfEstimates</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Credentials" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="USERNAME" elementType="Argument">
              <stringProp name="Argument.name">USERNAME</stringProp>
              <stringProp name="Argument.value">${__P(username,main)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(password,Welcome123)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="01_Authentication" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login_API" enabled="true">
            <stringProp name="HTTPSampler.path">/api/v2/auth/login</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${USERNAME}&quot;,&#xd;
    &quot;password&quot;: &quot;${PASSWORD}&quot;,&#xd;
    &quot;userType&quot;: &quot;string&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def username = vars.get(&quot;USERNAME&quot;) ?: &quot;USERNAME_NOT_SET&quot;
def password = vars.get(&quot;PASSWORD&quot;) ?: &quot;PASSWORD_NOT_SET&quot;
def authToken = &quot;AUTH_TOKEN_NOT_FOUND&quot;

// Parse only if response is not empty and contains JSON
def response = prev.getResponseDataAsString()

if (response &amp;&amp; response.trim().startsWith(&quot;{&quot;)) {
    try {
        def jsonSlurper = new JsonSlurper()
        def parsedJson = jsonSlurper.parseText(response)

        // Try to extract authToken from $.data
        authToken = parsedJson?.data ?: &quot;AUTH_TOKEN_NOT_FOUND&quot;
        vars.put(&quot;authToken&quot;, authToken.toString())

    } catch (Exception e) {
        log.error(&quot;❌ JSON parsing failed: ${e.message}&quot;)
        vars.put(&quot;authToken&quot;, &quot;AUTH_TOKEN_PARSE_ERROR&quot;)
    }
} else {
    log.error(&quot;❌ No valid JSON response received for auth token extraction.&quot;)
    vars.put(&quot;authToken&quot;, &quot;AUTH_TOKEN_EMPTY_RESPONSE&quot;)
}

// Log the values
log.info(&quot;============================================================&quot;)
log.info(&quot;✅ JSR223 PostProcessor - Runtime Variable Log&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;USERNAME used     : ${username}&quot;)
log.info(&quot;PASSWORD used     : ${password}&quot;)
log.info(&quot;AuthToken extracted: ${authToken}&quot;)
log.info(&quot;============================================================&quot;)

// Optional debug output
prev.setSampleLabel(&quot;Log Key Runtime Values&quot;)

def output = &quot;&quot;&quot;
----------------- Runtime Variable Log -----------------

✅ USERNAME used     : $username
🔒 PASSWORD used     : $password
🔑 AuthToken extracted: $authToken

---------------------------------------------------------
&quot;&quot;&quot;
prev.setResponseData(output, &quot;UTF-8&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get All Portfolio" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${authToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Project" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Portfolio" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;leftValue&quot;: 1,&#xd;
    &quot;offset&quot;: 0,&#xd;
    &quot;recordsPerPage&quot;: 450,&#xd;
    &quot;aggregateLevel&quot;: &quot;portfolio&quot;,&#xd;
    &quot;expandedList&quot;: [],&#xd;
    &quot;portfolioId&quot;: 0,&#xd;
    &quot;programmeId&quot;: 0,&#xd;
    &quot;schemeId&quot;: 0&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response body
def response = prev.getResponseDataAsString()

// Read title to match from JMeter variable
def portfolioTitle = vars.get(&quot;PORTFOLIO_TITLE&quot;) ?: &quot;PORTFOLIO_TITLE_NOT_SET&quot;

log.info(&quot;============================================================&quot;)
log.info(&quot;📁 Extracting portfolioId for title: ${portfolioTitle}&quot;)
log.info(&quot;------------------------------------------------------------&quot;)

try {
    def idList = JsonPath.read(response, &apos;$.data[?(@.title == &quot;&apos; + portfolioTitle + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def portfolioId = idList[0]
        vars.put(&quot;portfolioId&quot;, portfolioId.toString())
        log.info(&quot;✅ Extracted portfolioId: ${portfolioId}&quot;)
    } else {
        vars.put(&quot;portfolioId&quot;, &quot;NOT_FOUND&quot;)
        log.warn(&quot;⚠️ No matching portfolio found for title: ${portfolioTitle}&quot;)
    }
} catch (Exception e) {
    vars.put(&quot;portfolioId&quot;, &quot;EXTRACTION_ERROR&quot;)
    log.error(&quot;❌ Error extracting portfolioId: &quot; + e.getMessage())
}

log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Portfolio" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;leftValue&quot;: 1,&#xd;
    &quot;offset&quot;: 0,&#xd;
    &quot;recordsPerPage&quot;: 450,&#xd;
    &quot;aggregateLevel&quot;: &quot;portfolio&quot;,&#xd;
    &quot;expandedList&quot;: [${portfolioId}],&#xd;
    &quot;portfolioId&quot;: 0,&#xd;
    &quot;programmeId&quot;: 0,&#xd;
    &quot;schemeId&quot;: 0&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response data as string
def response = prev.getResponseDataAsString()

// Fetch the PROGRAMME_TITLE variable
def programmeTitle = vars.get(&quot;PROGRAMME_TITLE&quot;) ?: &quot;PROGRAMME_TITLE_NOT_SET&quot;

log.info(&quot;============================================================&quot;)
log.info(&quot;🎯 JSR223 PostProcessor - Programme ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Matching title: ${programmeTitle}&quot;)

try {
    // Extract programmeId using JSONPath
    def idList = JsonPath.read(response, &apos;$.data[?(@.title == &quot;&apos; + programmeTitle + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def programmeId = idList[0]
        vars.put(&quot;programmeId&quot;, programmeId.toString())
        log.info(&quot;✅ Extracted programmeId: ${programmeId}&quot;)
    } else {
        vars.put(&quot;programmeId&quot;, &quot;NOT_FOUND&quot;)
        log.warn(&quot;⚠️ No match found for title: ${programmeTitle}&quot;)
    }
} catch (Exception e) {
    vars.put(&quot;programmeId&quot;, &quot;EXTRACTION_ERROR&quot;)
    log.error(&quot;❌ Error extracting programmeId: &quot; + e.getMessage())
}

log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Programe" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;leftValue&quot;: 1,&#xd;
    &quot;offset&quot;: 0,&#xd;
    &quot;recordsPerPage&quot;: 450,&#xd;
    &quot;aggregateLevel&quot;: &quot;programme&quot;,&#xd;
    &quot;expandedList&quot;: [${portfolioId},${programmeId}],&#xd;
    &quot;portfolioId&quot;: 0,&#xd;
    &quot;programmeId&quot;: 0,&#xd;
    &quot;schemeId&quot;: 0&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response as a string
def response = prev.getResponseDataAsString()

// Fetch the project title from JMeter variable
def projectTitle = vars.get(&quot;PROJECT_TITLE&quot;) ?: &quot;PROJECT_TITLE_NOT_SET&quot;

log.info(&quot;============================================================&quot;)
log.info(&quot;🏗️  JSR223 PostProcessor - Project ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Matching project title: ${projectTitle}&quot;)

try {
    // Apply JSONPath to extract the matching project ID
    def idList = JsonPath.read(response, &apos;$.data[?(@.title == &quot;&apos; + projectTitle + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def projectId = idList[0]
        vars.put(&quot;projectId&quot;, projectId.toString())
        log.info(&quot;✅ Extracted projectId: ${projectId}&quot;)
    } else {
        vars.put(&quot;projectId&quot;, &quot;NOT_FOUND&quot;)
        log.warn(&quot;⚠️ No project found with title: ${projectTitle}&quot;)
    }
} catch (Exception e) {
    vars.put(&quot;projectId&quot;, &quot;EXTRACTION_ERROR&quot;)
    log.error(&quot;❌ Error extracting projectId: &quot; + e.message)
}

log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get/estimates/${projectId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
// Get variables with fallback defaults
def portfolioId = vars.get(&quot;portfolioId&quot;) ?: &quot;NOT_SET&quot;
def programmeId = vars.get(&quot;programmeId&quot;) ?: &quot;NOT_SET&quot;
def projectId   = vars.get(&quot;projectId&quot;)   ?: &quot;NOT_SET&quot;
def title       = vars.get(&quot;estimate_title&quot;) ?: &quot;NOT_SET&quot;

// Structured logging to JMeter console
log.info(&quot;============================================================&quot;)
log.info(&quot;📦 JSR223 PostProcessor - Variable Summary&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;📁 Portfolio ID  : ${portfolioId}&quot;)
log.info(&quot;📂 Programme ID  : ${programmeId}&quot;)
log.info(&quot;🏗️  Project ID    : ${projectId}&quot;)
// log.info(&quot;📝 Estimate Title : ${title}&quot;) // Uncomment if needed
log.info(&quot;============================================================&quot;)

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Administration - Estimate Resuest" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Estimate Request" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Estimators" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimator/get/estimators</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper

// Get response from previous sampler
def response = prev.getResponseDataAsString()

// Parse the JSON safely
def json
try {
    json = new JsonSlurper().parseText(response)
} catch (Exception e) {
    log.error(&quot;❌ Failed to parse JSON response: ${e.message}&quot;)
    vars.put(&quot;estimatorId&quot;, &quot;PARSE_ERROR&quot;)
    return
}

// Get the EstimatorName to match
def targetName = vars.get(&quot;EstimatorName&quot;)?.trim() ?: &quot;ESTIMATOR_NAME_NOT_SET&quot;
def estimatorId = null

log.info(&quot;============================================================&quot;)
log.info(&quot;🔍 JSR223 PostProcessor - Estimator ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🎯 Target Estimator Name : ${targetName}&quot;)

// Loop through &apos;data&apos; array and find match
if (json?.data instanceof List) {
    json.data.each { item -&gt;
        def name = item?.estimatorName?.trim()
        if (name?.equalsIgnoreCase(targetName)) {  // change to == for case-sensitive
            estimatorId = item.estimatorId
            return // break out of loop on first match
        }
    }
} else {
    log.warn(&quot;⚠️ &apos;data&apos; array not found or not a list.&quot;)
}

// Store and log result
if (estimatorId != null) {
    vars.put(&quot;estimatorId&quot;, estimatorId.toString())
    log.info(&quot;✅ Extracted estimatorId     : ${estimatorId}&quot;)
} else {
    vars.put(&quot;estimatorId&quot;, &quot;NOT_FOUND&quot;)
    log.warn(&quot;❌ No estimator found for    : ${targetName}&quot;)
}

log.info(&quot;============================================================&quot;)


</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Estimate Request" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 1 - Choose Estimate Name &amp; Location" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Estimate Type" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-type/get</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response from the previous sampler
def response = prev.getResponseDataAsString()

// Get the output type from JMeter variable
def outputType = vars.get(&quot;OutputType&quot;) ?: &quot;OUTPUT_TYPE_NOT_SET&quot;

// Start structured logging
log.info(&quot;============================================================&quot;)
log.info(&quot;🧪 JSR223 PostProcessor - Output ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Output Type : ${outputType}&quot;)

try {
    // JSONPath to find the id where outputType matches
    def idList = JsonPath.read(response, &apos;$.data[?(@.outputType == &quot;&apos; + outputType + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def outputId = idList[0]
        log.info(&quot;✅ Extracted Output ID  : ${outputId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;outputId&quot;, outputId.toString())
    } else {
        log.warn(&quot;⚠️ No matching outputType found for: ${outputType}&quot;)
        vars.put(&quot;outputId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error while extracting outputId: &quot; + e.getMessage())
    vars.put(&quot;outputId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Region" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/auth/regions</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response from the previous sampler
def response = prev.getResponseDataAsString()

// Get the region description from JMeter variable
def regionDesc = vars.get(&quot;REGION_DESC&quot;) ?: &quot;REGION_DESC_NOT_SET&quot;

// Structured logging
log.info(&quot;============================================================&quot;)
log.info(&quot;🌍 JSR223 PostProcessor - Region ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Region Desc : ${regionDesc}&quot;)

try {
    // JSONPath query to find matching regionId
    def regionIdList = JsonPath.read(response, &apos;$.data[?(@.regionDesc == &quot;&apos; + regionDesc + &apos;&quot;)].regionId&apos;)

    if (regionIdList &amp;&amp; regionIdList.size() &gt; 0) {
        def regionId = regionIdList[0]
        log.info(&quot;✅ Extracted Region ID  : ${regionId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;regionId&quot;, regionId.toString())
    } else {
        log.warn(&quot;⚠️ No matching regionDesc found for: ${regionDesc}&quot;)
        vars.put(&quot;regionId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error extracting regionId: &quot; + e.getMessage())
    vars.put(&quot;regionId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Area" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/common-v2/area/get?regionId=${regionId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">
import com.jayway.jsonpath.JsonPath

// Get response from the previous sampler
def response = prev.getResponseDataAsString()

// Get the area description from JMeter variable
def areaDesc = vars.get(&quot;AREA_DESC&quot;) ?: &quot;AREA_DESC_NOT_SET&quot;

// Structured logging
log.info(&quot;============================================================&quot;)
log.info(&quot;📍 JSR223 PostProcessor - Area ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Area Desc : ${areaDesc}&quot;)

try {
    // JSONPath query to find matching areaId
    def areaIdList = JsonPath.read(response, &apos;$.data[?(@.areaDesc == &quot;&apos; + areaDesc + &apos;&quot;)].areaId&apos;)

    if (areaIdList &amp;&amp; areaIdList.size() &gt; 0) {
        def areaId = areaIdList[0]
        log.info(&quot;✅ Extracted Area ID : ${areaId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;areaId&quot;, areaId.toString())
    } else {
        log.warn(&quot;⚠️ No matching areaDesc found for: ${areaDesc}&quot;)
        vars.put(&quot;areaId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error extracting areaId: &quot; + e.getMessage())
    vars.put(&quot;areaId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Portfolio List" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/project-composition/portfolio/get</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get the JSON response from the previous sampler
def response = prev.getResponseDataAsString()

// Fetch the dynamic portfolio title from JMeter variables
def portfolioTitle = vars.get(&quot;PORTFOLIO_TITLE&quot;) ?: &quot;PORTFOLIO_TITLE_NOT_SET&quot;

// Structured log start
log.info(&quot;============================================================&quot;)
log.info(&quot;📁 JSR223 PostProcessor - ID Extraction by Portfolio Title&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Name (Portfolio Title) : ${portfolioTitle}&quot;)

try {
    // JSONPath query: match name == ${PORTFOLIO_TITLE}, extract id
    def idList = JsonPath.read(response, &apos;$.data[?(@.name == &quot;&apos; + portfolioTitle + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def matchedId = idList[0]
        log.info(&quot;✅ Extracted ID                 : ${matchedId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;id&quot;, matchedId.toString())
    } else {
        log.warn(&quot;⚠️ No match found for name: ${portfolioTitle}&quot;)
        vars.put(&quot;id&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error during ID extraction: &quot; + e.getMessage())
    vars.put(&quot;id&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project Composition for Estimate Request" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/project-composition/programme/get?PortfolioId=${portfolioId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Estimation " enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/create</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;estimateName&quot;: &quot;${estimateName}&quot;,&#xd;
    &quot;portfolioId&quot;: ${portfolioId},&#xd;
    &quot;programmeId&quot;: ${programmeId},&#xd;
    &quot;regionId&quot;: ${regionId},&#xd;
    &quot;areaId&quot;: ${areaId},&#xd;
    &quot;UseExistingProject&quot;: 1,&#xd;
    &quot;step1Status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateName&quot;,&#xd;
        &quot;PortfolioId&quot;,&#xd;
        &quot;ProgrammeId&quot;,&#xd;
        &quot;RegionId&quot;,&#xd;
        &quot;AreaId&quot;,&#xd;
        &quot;UseExistingProject&quot;,&#xd;
        &quot;Step1Status&quot;&#xd;
    ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def randNum = org.apache.commons.lang3.RandomUtils.nextInt(1000, 9999)
def estimateName = &quot;Estimate_&quot; + randNum


vars.put(&quot;estimateName&quot;, estimateName)

// Optional: Log to JMeter console
log.info(&quot;Generated Estimate Name: &quot; + estimateName)
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get JSON response from the previous sampler
def response = prev.getResponseDataAsString()

// === Extract estimateRequestId and estimateName from $.data.estimateRequestId &amp; estimateName ===
try {
    def estimateRequestId = JsonPath.read(response, &apos;$.data.estimateRequestId&apos;)
    def estimateName = JsonPath.read(response, &apos;$.data.estimateName&apos;)

    vars.put(&quot;estimateRequestId&quot;, estimateRequestId.toString())
    vars.put(&quot;estimateName&quot;, estimateName.toString())

    log.info(&quot;✅ Extracted Estimate Request ID: ${estimateRequestId}&quot;)
    log.info(&quot;✅ Extracted Estimate Name      : ${estimateName}&quot;)
} catch (Exception e) {
    log.error(&quot;❌ Failed to extract estimateRequestId or estimateName: &quot; + e.message)
    vars.put(&quot;estimateRequestId&quot;, &quot;EXTRACTION_ERROR&quot;)
    vars.put(&quot;estimateName&quot;, &quot;EXTRACTION_ERROR&quot;)
}

// === Fetch and log all other existing variables ===
def outputId         = vars.get(&quot;outputId&quot;) ?: &quot;NOT_SET&quot;
def regionId         = vars.get(&quot;regionId&quot;) ?: &quot;NOT_SET&quot;
def portfolioId      = vars.get(&quot;id&quot;) ?: &quot;NOT_SET&quot;
def estimateRequestId = vars.get(&quot;estimateRequestId&quot;) ?: &quot;NOT_SET&quot;
def estimateName     = vars.get(&quot;estimateName&quot;) ?: &quot;NOT_SET&quot;

log.info(&quot;============================================================&quot;)
log.info(&quot;📊 JSR223 PostProcessor - Final Variable Log&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;📤 Output ID              : ${outputId}&quot;)
log.info(&quot;🌍 Region ID              : ${regionId}&quot;)
log.info(&quot;📁 Portfolio ID           : ${portfolioId}&quot;)
log.info(&quot;📑 Estimate Request ID    : ${estimateRequestId}&quot;)
log.info(&quot;📝 Estimate Name          : ${estimateName}&quot;)
log.info(&quot;============================================================&quot;)
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 2 - Choose Existing Project" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - ProjForEstimation" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/project-composition/proj-for-est-req/get</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="PortfolioId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${portfolioId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PortfolioId</stringProp>
                    </elementProp>
                    <elementProp name="ProgrammeId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${programmeId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ProgrammeId</stringProp>
                    </elementProp>
                    <elementProp name="RegionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${regionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">RegionId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Estimate Request by ID" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/get-request-by-id/${estimateRequestId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Choose Existing project" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;projectId&quot;: ${projectId},&#xd;
    &quot;OptionPhasePin&quot;: null,&#xd;
    &quot;DevPhasePin&quot;: null,&#xd;
    &quot;ConstPhasePin&quot;: null,&#xd;
    &quot;OtherPhasePin&quot;: null,&#xd;
    &quot;Area&quot;: null,&#xd;
    &quot;Route&quot;: null,&#xd;
    &quot;estimateRequestId&quot;: ${estimateRequestId},&#xd;
    &quot;Step2Status&quot;: 1,&#xd;
    &quot;step2Status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;ProjectId&quot;,&#xd;
        &quot;OptionPhasePin&quot;,&#xd;
        &quot;DevPhasePin&quot;,&#xd;
        &quot;ConstPhasePin&quot;,&#xd;
        &quot;OtherPhasePin&quot;,&#xd;
        &quot;Area&quot;,&#xd;
        &quot;Route&quot;,&#xd;
        &quot;Step2Status&quot;&#xd;
    ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 3 - Select Estimate Types &amp; Development Phase" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Estimate Type List " enabled="true">
                <stringProp name="HTTPSampler.path">api/v2/estimate-type/get</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Life Cycle Stage List " enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/life-cycle-stage/list</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Estimate Request by ID" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/get-request-by-id/${estimateRequestId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Development Phase id" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/development-phase/get?estimateTypeId=${outputId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response from previous sampler
def response = prev.getResponseDataAsString()

// Get the levelOfEstimateDescription from user-defined variable
def estimateDesc = vars.get(&quot;LEVEL_OF_ESTIMATE_DESC&quot;) ?: &quot;LEVEL_DESC_NOT_SET&quot;

// Structured logging
log.info(&quot;============================================================&quot;)
log.info(&quot;📊 JSR223 PostProcessor - levelOfEstimateId Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Estimate Description : ${estimateDesc}&quot;)

try {
    // JSONPath query to find the levelOfEstimateId for the matching description
    def estimateIdList = JsonPath.read(response, &apos;$.data[?(@.levelOfEstimateDescription == &quot;&apos; + estimateDesc + &apos;&quot;)].levelOfEstimateId&apos;)

    if (estimateIdList &amp;&amp; estimateIdList.size() &gt; 0) {
        def estimateId = estimateIdList[0]
        log.info(&quot;✅ Extracted levelOfEstimateId : ${estimateId}&quot;)

        // Store as JMeter variable
        vars.put(&quot;levelOfEstimateId&quot;, estimateId.toString())
    } else {
        log.warn(&quot;⚠️ No matching levelOfEstimateDescription found for: ${estimateDesc}&quot;)
        vars.put(&quot;levelOfEstimateId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error extracting levelOfEstimateId: &quot; + e.getMessage())
    vars.put(&quot;levelOfEstimateId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Estimate Types &amp; Development phase" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: ${estimateRequestId},&#xd;
    &quot;estimateTypeId&quot;: ${outputId},&#xd;
    &quot;devPhaseId&quot;: ${levelOfEstimateId},&#xd;
    &quot;step3Status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;EstimateTypeId&quot;,&#xd;
        &quot;DevPhaseId&quot;,&#xd;
        &quot;Step3Status&quot;&#xd;
    ]&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 4 - Specify Number of Estimates" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Scenarios" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/scenario-lib/get-all</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response from the previous sampler
def response = prev.getResponseDataAsString()

// Get the scenario description from the variable
def scenarioDesc = vars.get(&quot;SCENARIO_DESC&quot;) ?: &quot;SCENARIO_DESC_NOT_SET&quot;

// Structured Logging
log.info(&quot;============================================================&quot;)
log.info(&quot;📘 JSR223 PostProcessor - scenarioLibraryId Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Scenario Description : ${scenarioDesc}&quot;)

try {
    // Use JSONPath to find scenarioLibraryId where name matches scenarioDesc
    def scenarioIdList = JsonPath.read(response, &apos;$.data[?(@.name == &quot;&apos; + scenarioDesc + &apos;&quot;)].scenarioLibraryId&apos;)

    if (scenarioIdList &amp;&amp; scenarioIdList.size() &gt; 0) {
        def scenarioLibraryId = scenarioIdList[0]
        log.info(&quot;✅ Extracted scenarioLibraryId : ${scenarioLibraryId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;scenarioLibraryId&quot;, scenarioLibraryId.toString())
    } else {
        log.warn(&quot;⚠️ No matching scenario name found for: ${scenarioDesc}&quot;)
        vars.put(&quot;scenarioLibraryId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error extracting scenarioLibraryId: &quot; + e.getMessage())
    vars.put(&quot;scenarioLibraryId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Estimate request" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/get-request-by-id/${estimateRequestId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Estimate Type" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-type/get</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Specify Number of Estimates" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;outputTypeEnum&quot;: 0,&#xd;
  &quot;estimateRequestId&quot;: ${estimateRequestId},&#xd;
  &quot;numberOfEstimates&quot;: ${numberOfEstimates},&#xd;
  &quot;estimateRequestPlan&quot;: ${estimateRequestPlanBlock},&#xd;
  &quot;step4Status&quot;: ${step4StatusId},&#xd;
  &quot;proposedFields&quot;: [&#xd;
    &quot;OutputTypeEnum&quot;,&#xd;
    &quot;EstimateRequestId&quot;,&#xd;
    &quot;NumberOfEstimates&quot;,&#xd;
    &quot;EstimateRequestPlan&quot;,&#xd;
    &quot;Step4Status&quot;&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import java.time.LocalDate
import java.time.format.DateTimeFormatter
import groovy.json.JsonOutput

// 📆 Formatters
def dateFormatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)
def nameFormatter = DateTimeFormatter.ofPattern(&quot;yyyyMM&quot;)

// 🧾 Read variables
def estimateRequestId = vars.get(&quot;estimateRequestId&quot;) ?: &quot;1001&quot;
def scenarioLibraryId = vars.get(&quot;scenarioLibraryId&quot;) ?: &quot;2001&quot;
def step4StatusId = vars.get(&quot;step4StatusId&quot;) ?: vars.get(&quot;step4Status&quot;) ?: &quot;1&quot;
def numberOfEstimatesRaw = vars.get(&quot;numberOfEstimates&quot;)

// ❗ Ensure numberOfEstimates is provided
if (!numberOfEstimatesRaw?.trim()) {
    throw new IllegalArgumentException(&quot;❌ &apos;numberOfEstimates&apos; variable is required but not provided.&quot;)
}

int count = numberOfEstimatesRaw.toInteger()

// 🧾 Save validated variables
vars.put(&quot;estimateRequestId&quot;, estimateRequestId)
vars.put(&quot;scenarioLibraryId&quot;, scenarioLibraryId)
vars.put(&quot;step4StatusId&quot;, step4StatusId)
vars.put(&quot;numberOfEstimates&quot;, count.toString())
vars.put(&quot;numberOfPlans&quot;, count.toString())

log.info(&quot;✅ numberOfEstimates from UDV: ${count}&quot;)

// 📦 Generate dynamic estimate plans
def today = LocalDate.now()
def estimatePlanList = []

for (int i = 0; i &lt; count; i++) {
    def startDate = today.plusDays(i * 2)
    def endDate = startDate.plusDays(10)
    def dueDate = startDate.plusDays(1)
    def dynamicName = &quot;EstimatePlan_${startDate.format(nameFormatter)}_${System.currentTimeMillis()}&quot;

    // Only store the first one individually (for reference)
    if (i == 0) {
        vars.put(&quot;dynamicName&quot;, dynamicName)
        vars.put(&quot;dynamicStartDate&quot;, startDate.format(dateFormatter))
        vars.put(&quot;dynamicEndDate&quot;, endDate.format(dateFormatter))
        vars.put(&quot;dynamicDueDate&quot;, dueDate.format(dateFormatter))
    }

    // Log each plan
    log.info(&quot;📌 Plan ${i} → name: ${dynamicName}, start: ${startDate}, end: ${endDate}, due: ${dueDate}&quot;)

    def plan = [
        name      : dynamicName,
        dueDate   : dueDate.format(dateFormatter),
        purpose   : &quot;Project estimate&quot;,
        scenarioId: scenarioLibraryId.toInteger(),
        startDate : startDate.format(dateFormatter),
        endDate   : endDate.format(dateFormatter),
        isDeleted : 0
    ]

    estimatePlanList &lt;&lt; plan
}

// 🧾 Convert to JSON array and save
def estimatePlanBlockJson = JsonOutput.toJson(estimatePlanList)
vars.put(&quot;estimateRequestPlanBlock&quot;, estimatePlanBlockJson)
log.info(&quot;✅ Final estimateRequestPlanBlock JSON:\n&quot; + estimatePlanBlockJson)
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 5 - Upload Any Supporting Documents" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload any Supporting Document" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: ${estimateRequestId},&#xd;
    &quot;step5Status&quot;: 1,&#xd;
    &quot;tempDocIds&quot;: [],&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;Step5Status&quot;,&#xd;
        &quot;TempDocIds&quot;&#xd;
    ]&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 6 - Project Governance" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Project Governance" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;estimateGovernanceComments&quot;: &quot;${estimateGovernanceComments}&quot;,&#xd;
    &quot;generalComments&quot;: &quot;${generalComments}&quot;,&#xd;
    &quot;estimateRequestReason&quot;: &quot;${estimateRequestReason}&quot;,&#xd;
    &quot;governanceMeetingDate&quot;: null,&#xd;
    &quot;projectManagerName&quot;: &quot;&quot;,&#xd;
    &quot;projectManagerEmployer&quot;: &quot;&quot;,&#xd;
    &quot;projectManagerContactNumber&quot;: &quot;&quot;,&#xd;
    &quot;projectManagerEmailAddress&quot;: &quot;&quot;,&#xd;
    &quot;assistantProjectManager&quot;: &quot;&quot;,&#xd;
    &quot;assistantProjectManagerContactNumber&quot;: &quot;&quot;,&#xd;
    &quot;assistantProjectManagerEmail&quot;: &quot;&quot;,&#xd;
    &quot;step6Status&quot;: 1,&#xd;
    &quot;estimateRequestId&quot;: ${estimateRequestId},&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateGovernanceComments&quot;,&#xd;
        &quot;GeneralComments&quot;,&#xd;
        &quot;EstimateRequestReason&quot;,&#xd;
        &quot;GovernanceMeetingDate&quot;,&#xd;
        &quot;ProjectManagerName&quot;,&#xd;
        &quot;ProjectManagerEmployer&quot;,&#xd;
        &quot;ProjectManagerContactNumber&quot;,&#xd;
        &quot;ProjectManagerEmailAddress&quot;,&#xd;
        &quot;AssistantProjectManager&quot;,&#xd;
        &quot;AssistantProjectManagerContactNumber&quot;,&#xd;
        &quot;AssistantProjectManagerEmail&quot;,&#xd;
        &quot;Step6Status&quot;&#xd;
    ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// Function to generate a random alphanumeric string of specific length
String generateRandomString(String prefix, int length) {
    def chars = (&apos;A&apos;..&apos;Z&apos;) + (&apos;a&apos;..&apos;z&apos;) + (&apos;0&apos;..&apos;9&apos;)
    def randomPart = (1..(length - prefix.length())).collect { chars[new Random().nextInt(chars.size())] }.join()
    return (prefix + randomPart).toUpperCase()
}

// Generate comments with 20-character total length
def estGovComment = generateRandomString(&quot;Gov_&quot;, 20)
def genComment = generateRandomString(&quot;Gen_&quot;, 20)
def estRequestReason = generateRandomString(&quot;Res_&quot;, 20)

// Store in JMeter variables
vars.put(&quot;estimateGovernanceComments&quot;, estGovComment)
vars.put(&quot;generalComments&quot;, genComment)
vars.put(&quot;estimateRequestReason&quot;, estRequestReason)

// Optional logging for debug
log.info(&quot;Generated estimateGovernanceComments: &quot; + estGovComment)
log.info(&quot;Generated generalComments: &quot; + genComment)
log.info(&quot;Generated estimateRequestReason: &quot; + estRequestReason)



// Default for step4StatusId
if (!vars.get(&quot;step7StatusId&quot;) || vars.get(&quot;step7StatusId&quot;).trim().isEmpty()) {
    vars.put(&quot;step7StatusId&quot;, &quot;1&quot;)
}
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Request" enabled="false">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: ${estimateRequestId},&#xd;
    &quot;status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;Step7Status&quot;,&#xd;
        &quot;ReviewComments&quot;,&#xd;
        &quot;Status&quot;&#xd;
    ],&#xd;
    &quot;step7Status&quot;: 1,&#xd;
    &quot;reviewComments&quot;: null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 7 - Estimate Request Summary" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Request" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/get-request-by-id/${estimateRequestId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Estimate Approve" enabled="true">
                <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: ${estimateRequestId},&#xd;
    &quot;status&quot;: 2,&#xd;
    &quot;estimatorId&quot;: ${estimatorId},&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;Step7Status&quot;,&#xd;
        &quot;EstimatorId&quot;,&#xd;
        &quot;ReviewComments&quot;,&#xd;
        &quot;Status&quot;,&#xd;
        &quot;EstimateRequestReviewer&quot;,&#xd;
        &quot;ApproverId&quot;&#xd;
    ],&#xd;
    &quot;step7Status&quot;: 1,&#xd;
    &quot;reviewComments&quot;: null,&#xd;
     &quot;estimateRequestReviewer&quot;: [&#xd;
        {&#xd;
            &quot;estimateRequestReviewerId&quot;: null,&#xd;
            &quot;estimateRequestId&quot;: ${estimateRequestId},&#xd;
            &quot;estimatorId&quot;: ${estimatorId},&#xd;
            &quot;isDeleted&quot;: 0&#xd;
        }&#xd;
    ],&#xd;
    &quot;approverId&quot;: ${estimatorId}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// Get estimatorId from JMeter variables
def estimatorId = vars.get(&quot;estimatorId&quot;)

// Log to JMeter console/log
log.info(&quot;JSR223 PreProcessor - estimatorId before request: &quot; + estimatorId)
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\radhakrishnanv\Working Project\Benchmark_Estimating\Benchmark Estimate - Regression Test Files\Approve Estimation Quotation API\Integration_Approve_Estimation_Quotation API.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Negative Test Scenario for Approve Estimation Quotation" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="THREAD_COUNT" elementType="Argument">
              <stringProp name="Argument.name">THREAD_COUNT</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc"></stringProp>
            </elementProp>
            <elementProp name="RAMP_UP" elementType="Argument">
              <stringProp name="Argument.name">RAMP_UP</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LOOP_COUNT" elementType="Argument">
              <stringProp name="Argument.name">LOOP_COUNT</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">PROTOCOL</stringProp>
              <stringProp name="Argument.value">https</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="BASE_URL" elementType="Argument">
              <stringProp name="Argument.name">BASE_URL</stringProp>
              <stringProp name="Argument.value">v10-integration.dev.api.test.benchmarkestimating.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="API_VERSION" elementType="Argument">
              <stringProp name="Argument.name">API_VERSION</stringProp>
              <stringProp name="Argument.value">v2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PORTFOLIO_TITLE" elementType="Argument">
              <stringProp name="Argument.name">PORTFOLIO_TITLE</stringProp>
              <stringProp name="Argument.value">Karan</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROGRAMME_TITLE" elementType="Argument">
              <stringProp name="Argument.name">PROGRAMME_TITLE</stringProp>
              <stringProp name="Argument.value">kl</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROJECT_TITLE" elementType="Argument">
              <stringProp name="Argument.name">PROJECT_TITLE</stringProp>
              <stringProp name="Argument.value">New Test Project</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ESTIMATE_TITLE" elementType="Argument">
              <stringProp name="Argument.name">ESTIMATE_TITLE</stringProp>
              <stringProp name="Argument.value">RETY</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="REGION_DESC" elementType="Argument">
              <stringProp name="Argument.name">REGION_DESC</stringProp>
              <stringProp name="Argument.value">North East</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="EstimatorName" elementType="Argument">
              <stringProp name="Argument.name">EstimatorName</stringProp>
              <stringProp name="Argument.value">Vijay Mishra</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OutputType" elementType="Argument">
              <stringProp name="Argument.name">OutputType</stringProp>
              <stringProp name="Argument.value">Discrete Operation and Maintenance Estimate</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LEVEL_OF_ESTIMATE_DESC" elementType="Argument">
              <stringProp name="Argument.name">LEVEL_OF_ESTIMATE_DESC</stringProp>
              <stringProp name="Argument.value">RIS Estimate</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PAGE_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">PAGE_NUMBER</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RESOURCE_CODE" elementType="Argument">
              <stringProp name="Argument.name">RESOURCE_CODE</stringProp>
              <stringProp name="Argument.value">AGG20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AREA_DESC" elementType="Argument">
              <stringProp name="Argument.name">AREA_DESC</stringProp>
              <stringProp name="Argument.value">Area 12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SCENARIO_DESC" elementType="Argument">
              <stringProp name="Argument.name">SCENARIO_DESC</stringProp>
              <stringProp name="Argument.value">Without Scheme</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="numberOfEstimates" elementType="Argument">
              <stringProp name="Argument.name">numberOfEstimates</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Credentials" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="USERNAME" elementType="Argument">
              <stringProp name="Argument.name">USERNAME</stringProp>
              <stringProp name="Argument.value">${__P(username,main)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(password,Welcome123)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="01_Authentication" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login_API" enabled="true">
            <stringProp name="HTTPSampler.path">/api/v2/auth/login</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${USERNAME}&quot;,&#xd;
    &quot;password&quot;: &quot;${PASSWORD}&quot;,&#xd;
    &quot;userType&quot;: &quot;string&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def username = vars.get(&quot;USERNAME&quot;) ?: &quot;USERNAME_NOT_SET&quot;
def password = vars.get(&quot;PASSWORD&quot;) ?: &quot;PASSWORD_NOT_SET&quot;
def authToken = &quot;AUTH_TOKEN_NOT_FOUND&quot;

// Parse only if response is not empty and contains JSON
def response = prev.getResponseDataAsString()

if (response &amp;&amp; response.trim().startsWith(&quot;{&quot;)) {
    try {
        def jsonSlurper = new JsonSlurper()
        def parsedJson = jsonSlurper.parseText(response)

        // Try to extract authToken from $.data
        authToken = parsedJson?.data ?: &quot;AUTH_TOKEN_NOT_FOUND&quot;
        vars.put(&quot;authToken&quot;, authToken.toString())

    } catch (Exception e) {
        log.error(&quot;❌ JSON parsing failed: ${e.message}&quot;)
        vars.put(&quot;authToken&quot;, &quot;AUTH_TOKEN_PARSE_ERROR&quot;)
    }
} else {
    log.error(&quot;❌ No valid JSON response received for auth token extraction.&quot;)
    vars.put(&quot;authToken&quot;, &quot;AUTH_TOKEN_EMPTY_RESPONSE&quot;)
}

// Log the values
log.info(&quot;============================================================&quot;)
log.info(&quot;✅ JSR223 PostProcessor - Runtime Variable Log&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;USERNAME used     : ${username}&quot;)
log.info(&quot;PASSWORD used     : ${password}&quot;)
log.info(&quot;AuthToken extracted: ${authToken}&quot;)
log.info(&quot;============================================================&quot;)

// Optional debug output
prev.setSampleLabel(&quot;Log Key Runtime Values&quot;)

def output = &quot;&quot;&quot;
----------------- Runtime Variable Log -----------------

✅ USERNAME used     : $username
🔒 PASSWORD used     : $password
🔑 AuthToken extracted: $authToken

---------------------------------------------------------
&quot;&quot;&quot;
prev.setResponseData(output, &quot;UTF-8&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Project" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Portfolio" enabled="true">
            <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;leftValue&quot;: 1,&#xd;
    &quot;offset&quot;: 0,&#xd;
    &quot;recordsPerPage&quot;: 450,&#xd;
    &quot;aggregateLevel&quot;: &quot;portfolio&quot;,&#xd;
    &quot;expandedList&quot;: [],&#xd;
    &quot;portfolioId&quot;: 0,&#xd;
    &quot;programmeId&quot;: 0,&#xd;
    &quot;schemeId&quot;: 0&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response body
def response = prev.getResponseDataAsString()

// Read title to match from JMeter variable
def portfolioTitle = vars.get(&quot;PORTFOLIO_TITLE&quot;) ?: &quot;PORTFOLIO_TITLE_NOT_SET&quot;

log.info(&quot;============================================================&quot;)
log.info(&quot;📁 Extracting portfolioId for title: ${portfolioTitle}&quot;)
log.info(&quot;------------------------------------------------------------&quot;)

try {
    def idList = JsonPath.read(response, &apos;$.data[?(@.title == &quot;&apos; + portfolioTitle + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def portfolioId = idList[0]
        vars.put(&quot;portfolioId&quot;, portfolioId.toString())
        log.info(&quot;✅ Extracted portfolioId: ${portfolioId}&quot;)
    } else {
        vars.put(&quot;portfolioId&quot;, &quot;NOT_FOUND&quot;)
        log.warn(&quot;⚠️ No matching portfolio found for title: ${portfolioTitle}&quot;)
    }
} catch (Exception e) {
    vars.put(&quot;portfolioId&quot;, &quot;EXTRACTION_ERROR&quot;)
    log.error(&quot;❌ Error extracting portfolioId: &quot; + e.getMessage())
}

log.info(&quot;============================================================&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Portfolio" enabled="true">
            <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;leftValue&quot;: 1,&#xd;
    &quot;offset&quot;: 0,&#xd;
    &quot;recordsPerPage&quot;: 450,&#xd;
    &quot;aggregateLevel&quot;: &quot;portfolio&quot;,&#xd;
    &quot;expandedList&quot;: [${portfolioId}],&#xd;
    &quot;portfolioId&quot;: 0,&#xd;
    &quot;programmeId&quot;: 0,&#xd;
    &quot;schemeId&quot;: 0&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response data as string
def response = prev.getResponseDataAsString()

// Fetch the PROGRAMME_TITLE variable
def programmeTitle = vars.get(&quot;PROGRAMME_TITLE&quot;) ?: &quot;PROGRAMME_TITLE_NOT_SET&quot;

log.info(&quot;============================================================&quot;)
log.info(&quot;🎯 JSR223 PostProcessor - Programme ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Matching title: ${programmeTitle}&quot;)

try {
    // Extract programmeId using JSONPath
    def idList = JsonPath.read(response, &apos;$.data[?(@.title == &quot;&apos; + programmeTitle + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def programmeId = idList[0]
        vars.put(&quot;programmeId&quot;, programmeId.toString())
        log.info(&quot;✅ Extracted programmeId: ${programmeId}&quot;)
    } else {
        vars.put(&quot;programmeId&quot;, &quot;NOT_FOUND&quot;)
        log.warn(&quot;⚠️ No match found for title: ${programmeTitle}&quot;)
    }
} catch (Exception e) {
    vars.put(&quot;programmeId&quot;, &quot;EXTRACTION_ERROR&quot;)
    log.error(&quot;❌ Error extracting programmeId: &quot; + e.getMessage())
}

log.info(&quot;============================================================&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Programe" enabled="true">
            <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;leftValue&quot;: 1,&#xd;
    &quot;offset&quot;: 0,&#xd;
    &quot;recordsPerPage&quot;: 450,&#xd;
    &quot;aggregateLevel&quot;: &quot;programme&quot;,&#xd;
    &quot;expandedList&quot;: [${portfolioId},${programmeId}],&#xd;
    &quot;portfolioId&quot;: 0,&#xd;
    &quot;programmeId&quot;: 0,&#xd;
    &quot;schemeId&quot;: 0&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response as a string
def response = prev.getResponseDataAsString()

// Fetch the project title from JMeter variable
def projectTitle = vars.get(&quot;PROJECT_TITLE&quot;) ?: &quot;PROJECT_TITLE_NOT_SET&quot;

log.info(&quot;============================================================&quot;)
log.info(&quot;🏗️  JSR223 PostProcessor - Project ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Matching project title: ${projectTitle}&quot;)

try {
    // Apply JSONPath to extract the matching project ID
    def idList = JsonPath.read(response, &apos;$.data[?(@.title == &quot;&apos; + projectTitle + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def projectId = idList[0]
        vars.put(&quot;projectId&quot;, projectId.toString())
        log.info(&quot;✅ Extracted projectId: ${projectId}&quot;)
    } else {
        vars.put(&quot;projectId&quot;, &quot;NOT_FOUND&quot;)
        log.warn(&quot;⚠️ No project found with title: ${projectTitle}&quot;)
    }
} catch (Exception e) {
    vars.put(&quot;projectId&quot;, &quot;EXTRACTION_ERROR&quot;)
    log.error(&quot;❌ Error extracting projectId: &quot; + e.message)
}

log.info(&quot;============================================================&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project" enabled="true">
            <stringProp name="HTTPSampler.path">/api/v2/project-composition/get/estimates/${projectId}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
// Get variables with fallback defaults
def portfolioId = vars.get(&quot;portfolioId&quot;) ?: &quot;NOT_SET&quot;
def programmeId = vars.get(&quot;programmeId&quot;) ?: &quot;NOT_SET&quot;
def projectId   = vars.get(&quot;projectId&quot;)   ?: &quot;NOT_SET&quot;
def title       = vars.get(&quot;estimate_title&quot;) ?: &quot;NOT_SET&quot;

// Structured logging to JMeter console
log.info(&quot;============================================================&quot;)
log.info(&quot;📦 JSR223 PostProcessor - Variable Summary&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;📁 Portfolio ID  : ${portfolioId}&quot;)
log.info(&quot;📂 Programme ID  : ${programmeId}&quot;)
log.info(&quot;🏗️  Project ID    : ${projectId}&quot;)
// log.info(&quot;📝 Estimate Title : ${title}&quot;) // Uncomment if needed
log.info(&quot;============================================================&quot;)

</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${authToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Administration - Estimate Resuest" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Estimate Request" enabled="true">
            <stringProp name="HTTPSampler.path">/api/v2/estimate-request/get</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Estimators" enabled="true">
            <stringProp name="HTTPSampler.path">/api/v2/estimator/get/estimators</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

// Get response from previous sampler
def response = prev.getResponseDataAsString()

// Parse the JSON safely
def json
try {
    json = new JsonSlurper().parseText(response)
} catch (Exception e) {
    log.error(&quot;❌ Failed to parse JSON response: ${e.message}&quot;)
    vars.put(&quot;estimatorId&quot;, &quot;PARSE_ERROR&quot;)
    return
}

// Get the EstimatorName to match
def targetName = vars.get(&quot;EstimatorName&quot;)?.trim() ?: &quot;ESTIMATOR_NAME_NOT_SET&quot;
def estimatorId = null

log.info(&quot;============================================================&quot;)
log.info(&quot;🔍 JSR223 PostProcessor - Estimator ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🎯 Target Estimator Name : ${targetName}&quot;)

// Loop through &apos;data&apos; array and find match
if (json?.data instanceof List) {
    json.data.each { item -&gt;
        def name = item?.estimatorName?.trim()
        if (name?.equalsIgnoreCase(targetName)) {  // change to == for case-sensitive
            estimatorId = item.estimatorId
            return // break out of loop on first match
        }
    }
} else {
    log.warn(&quot;⚠️ &apos;data&apos; array not found or not a list.&quot;)
}

// Store and log result
if (estimatorId != null) {
    vars.put(&quot;estimatorId&quot;, estimatorId.toString())
    log.info(&quot;✅ Extracted estimatorId     : ${estimatorId}&quot;)
} else {
    vars.put(&quot;estimatorId&quot;, &quot;NOT_FOUND&quot;)
    log.warn(&quot;❌ No estimator found for    : ${targetName}&quot;)
}

log.info(&quot;============================================================&quot;)


</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${authToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Estimate Request" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 1 - Choose Estimate Name &amp; Location" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Estimate Type" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-type/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response from the previous sampler
def response = prev.getResponseDataAsString()

// Get the output type from JMeter variable
def outputType = vars.get(&quot;OutputType&quot;) ?: &quot;OUTPUT_TYPE_NOT_SET&quot;

// Start structured logging
log.info(&quot;============================================================&quot;)
log.info(&quot;🧪 JSR223 PostProcessor - Output ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Output Type : ${outputType}&quot;)

try {
    // JSONPath to find the id where outputType matches
    def idList = JsonPath.read(response, &apos;$.data[?(@.outputType == &quot;&apos; + outputType + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def outputId = idList[0]
        log.info(&quot;✅ Extracted Output ID  : ${outputId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;outputId&quot;, outputId.toString())
    } else {
        log.warn(&quot;⚠️ No matching outputType found for: ${outputType}&quot;)
        vars.put(&quot;outputId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error while extracting outputId: &quot; + e.getMessage())
    vars.put(&quot;outputId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Region" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/auth/regions</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response from the previous sampler
def response = prev.getResponseDataAsString()

// Get the region description from JMeter variable
def regionDesc = vars.get(&quot;REGION_DESC&quot;) ?: &quot;REGION_DESC_NOT_SET&quot;

// Structured logging
log.info(&quot;============================================================&quot;)
log.info(&quot;🌍 JSR223 PostProcessor - Region ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Region Desc : ${regionDesc}&quot;)

try {
    // JSONPath query to find matching regionId
    def regionIdList = JsonPath.read(response, &apos;$.data[?(@.regionDesc == &quot;&apos; + regionDesc + &apos;&quot;)].regionId&apos;)

    if (regionIdList &amp;&amp; regionIdList.size() &gt; 0) {
        def regionId = regionIdList[0]
        log.info(&quot;✅ Extracted Region ID  : ${regionId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;regionId&quot;, regionId.toString())
    } else {
        log.warn(&quot;⚠️ No matching regionDesc found for: ${regionDesc}&quot;)
        vars.put(&quot;regionId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error extracting regionId: &quot; + e.getMessage())
    vars.put(&quot;regionId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Area" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common-v2/area/get?regionId=${regionId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
import com.jayway.jsonpath.JsonPath

// Get response from the previous sampler
def response = prev.getResponseDataAsString()

// Get the area description from JMeter variable
def areaDesc = vars.get(&quot;AREA_DESC&quot;) ?: &quot;AREA_DESC_NOT_SET&quot;

// Structured logging
log.info(&quot;============================================================&quot;)
log.info(&quot;📍 JSR223 PostProcessor - Area ID Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Area Desc : ${areaDesc}&quot;)

try {
    // JSONPath query to find matching areaId
    def areaIdList = JsonPath.read(response, &apos;$.data[?(@.areaDesc == &quot;&apos; + areaDesc + &apos;&quot;)].areaId&apos;)

    if (areaIdList &amp;&amp; areaIdList.size() &gt; 0) {
        def areaId = areaIdList[0]
        log.info(&quot;✅ Extracted Area ID : ${areaId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;areaId&quot;, areaId.toString())
    } else {
        log.warn(&quot;⚠️ No matching areaDesc found for: ${areaDesc}&quot;)
        vars.put(&quot;areaId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error extracting areaId: &quot; + e.getMessage())
    vars.put(&quot;areaId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Portfolio List" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/portfolio/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get the JSON response from the previous sampler
def response = prev.getResponseDataAsString()

// Fetch the dynamic portfolio title from JMeter variables
def portfolioTitle = vars.get(&quot;PORTFOLIO_TITLE&quot;) ?: &quot;PORTFOLIO_TITLE_NOT_SET&quot;

// Structured log start
log.info(&quot;============================================================&quot;)
log.info(&quot;📁 JSR223 PostProcessor - ID Extraction by Portfolio Title&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Name (Portfolio Title) : ${portfolioTitle}&quot;)

try {
    // JSONPath query: match name == ${PORTFOLIO_TITLE}, extract id
    def idList = JsonPath.read(response, &apos;$.data[?(@.name == &quot;&apos; + portfolioTitle + &apos;&quot;)].id&apos;)

    if (idList &amp;&amp; idList.size() &gt; 0) {
        def matchedId = idList[0]
        log.info(&quot;✅ Extracted ID                 : ${matchedId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;id&quot;, matchedId.toString())
    } else {
        log.warn(&quot;⚠️ No match found for name: ${portfolioTitle}&quot;)
        vars.put(&quot;id&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error during ID extraction: &quot; + e.getMessage())
    vars.put(&quot;id&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project Composition for Estimate Request" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/programme/get?PortfolioId=${portfolioId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Estimate Estimate Name already exist" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/create</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;estimateName&quot;:&quot;test&quot;,&quot;portfolioId&quot;:407,&quot;programmeId&quot;:408,&quot;regionId&quot;:27,&quot;areaId&quot;:3,&quot;UseExistingProject&quot;:1,&quot;step1Status&quot;:1,&quot;proposedFields&quot;:[&quot;EstimateName&quot;,&quot;PortfolioId&quot;,&quot;ProgrammeId&quot;,&quot;RegionId&quot;,&quot;AreaId&quot;,&quot;UseExistingProject&quot;,&quot;Step1Status&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Get extracted value
def errorDetails = vars.get(&quot;error_details&quot;) ?: &quot;NOT_FOUND&quot;

// Log to JMeter GUI &amp; log file
log.info(&quot;====================================&quot;)
log.info(&quot;🔍 Extracted Error Details: &quot; + errorDetails)
log.info(&quot;====================================&quot;)

// Log to console when running in non-GUI mode
println(&quot;====================================&quot;)
println(&quot;🔍 Extracted Error Details: &quot; + errorDetails)
println(&quot;====================================&quot;)

// Optional inline assertion
if (errorDetails != &quot;Estimate name already exist, It must be unique.&quot;) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Error details do not match expected value.&quot;)
}
</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">error_details</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Estimation " enabled="false">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/create</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateName&quot;: &quot;${estimateName}&quot;,&#xd;
    &quot;portfolioId&quot;: ${portfolioId},&#xd;
    &quot;programmeId&quot;: ${programmeId},&#xd;
    &quot;regionId&quot;: ${regionId},&#xd;
    &quot;areaId&quot;: ${areaId},&#xd;
    &quot;UseExistingProject&quot;: 1,&#xd;
    &quot;step1Status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateName&quot;,&#xd;
        &quot;PortfolioId&quot;,&#xd;
        &quot;ProgrammeId&quot;,&#xd;
        &quot;RegionId&quot;,&#xd;
        &quot;AreaId&quot;,&#xd;
        &quot;UseExistingProject&quot;,&#xd;
        &quot;Step1Status&quot;&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def randNum = org.apache.commons.lang3.RandomUtils.nextInt(1000, 9999)
def estimateName = &quot;Estimate_&quot; + randNum


vars.put(&quot;estimateName&quot;, estimateName)

// Optional: Log to JMeter console
log.info(&quot;Generated Estimate Name: &quot; + estimateName)
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get JSON response from the previous sampler
def response = prev.getResponseDataAsString()

// === Extract estimateRequestId and estimateName from $.data.estimateRequestId &amp; estimateName ===
try {
    def estimateRequestId = JsonPath.read(response, &apos;$.data.estimateRequestId&apos;)
    def estimateName = JsonPath.read(response, &apos;$.data.estimateName&apos;)

    vars.put(&quot;estimateRequestId&quot;, estimateRequestId.toString())
    vars.put(&quot;estimateName&quot;, estimateName.toString())

    log.info(&quot;✅ Extracted Estimate Request ID: ${estimateRequestId}&quot;)
    log.info(&quot;✅ Extracted Estimate Name      : ${estimateName}&quot;)
} catch (Exception e) {
    log.error(&quot;❌ Failed to extract estimateRequestId or estimateName: &quot; + e.message)
    vars.put(&quot;estimateRequestId&quot;, &quot;EXTRACTION_ERROR&quot;)
    vars.put(&quot;estimateName&quot;, &quot;EXTRACTION_ERROR&quot;)
}

// === Fetch and log all other existing variables ===
def outputId         = vars.get(&quot;outputId&quot;) ?: &quot;NOT_SET&quot;
def regionId         = vars.get(&quot;regionId&quot;) ?: &quot;NOT_SET&quot;
def portfolioId      = vars.get(&quot;id&quot;) ?: &quot;NOT_SET&quot;
def estimateRequestId = vars.get(&quot;estimateRequestId&quot;) ?: &quot;NOT_SET&quot;
def estimateName     = vars.get(&quot;estimateName&quot;) ?: &quot;NOT_SET&quot;

log.info(&quot;============================================================&quot;)
log.info(&quot;📊 JSR223 PostProcessor - Final Variable Log&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;📤 Output ID              : ${outputId}&quot;)
log.info(&quot;🌍 Region ID              : ${regionId}&quot;)
log.info(&quot;📁 Portfolio ID           : ${portfolioId}&quot;)
log.info(&quot;📑 Estimate Request ID    : ${estimateRequestId}&quot;)
log.info(&quot;📝 Estimate Name          : ${estimateName}&quot;)
log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step 1:  Mandatory fields are missing: EstimateName, PortfolioId" enabled="true">
            <stringProp name="HTTPSampler.path">/api/v2/estimate-request/create</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;estimateName&quot;:&quot;test6546ghm54&quot;,&quot;portfolioId&quot;:407,&quot;programmeId&quot;:408,&quot;regionId&quot;:27,&quot;areaId&quot;:3,&quot;UseExistingProject&quot;:1,&quot;step1Status&quot;:1,&quot;proposedFields&quot;:[&quot;&quot;,&quot;&quot;,&quot;ProgrammeId&quot;,&quot;RegionId&quot;,&quot;AreaId&quot;,&quot;UseExistingProject&quot;,&quot;&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Get extracted value
def step1Error = vars.get(&quot;step1_error&quot;) ?: &quot;NOT_FOUND&quot;

// Log to JMeter GUI and log file
log.info(&quot;====================================&quot;)
log.info(&quot;🚫 Step1 Error Message: &quot; + step1Error)
log.info(&quot;====================================&quot;)

// Log to console (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;🚫 Step1 Error Message: &quot; + step1Error)
println(&quot;====================================&quot;)

// Optional validation
if (!step1Error.contains(&quot;Mandatory fields are missing&quot;)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Step1 error message did not match expected.&quot;)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step1_error</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" Step 1: PortfolioId  incomingEstReq field is required.">
            <stringProp name="HTTPSampler.path">/api/v2/estimate-request/create</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;estimateName&quot;:&quot;test&quot;,&quot;portfolioId&quot;:,&quot;programmeId&quot;:408,&quot;regionId&quot;:27,&quot;areaId&quot;:3,&quot;UseExistingProject&quot;:1,&quot;step1Status&quot;:1,&quot;proposedFields&quot;:[&quot;EstimateName&quot;,&quot;PortfolioId&quot;,&quot;ProgrammeId&quot;,&quot;RegionId&quot;,&quot;AreaId&quot;,&quot;UseExistingProject&quot;,&quot;Step1Status&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def portErr = vars.get(&quot;err_portfolioId&quot;) ?: &quot;NOT_FOUND&quot;
def incomingErr = vars.get(&quot;err_incomingEstReq&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;

// Log to JMeter GUI
log.info(&quot;====================================&quot;)
log.info(&quot;📌 PortfolioId Error: &quot; + portErr)
log.info(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
log.info(&quot;📌 Title: &quot; + titleErr)
log.info(&quot;====================================&quot;)

// Log to console (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 PortfolioId Error: &quot; + portErr)
println(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
println(&quot;📌 Title: &quot; + titleErr)
println(&quot;====================================&quot;)
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">err_portfolioId;err_incomingEstReq;err_title</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.portfolioId[0];$.errors.incomingEstReq[0];$.title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step 1:  ProgrammeId  incomingEstReq field is required.">
            <stringProp name="HTTPSampler.path">/api/v2/estimate-request/create</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;estimateName&quot;:&quot;test&quot;,&quot;portfolioId&quot;:407,&quot;programmeId&quot;:,&quot;regionId&quot;:27,&quot;areaId&quot;:3,&quot;UseExistingProject&quot;:1,&quot;step1Status&quot;:1,&quot;proposedFields&quot;:[&quot;EstimateName&quot;,&quot;PortfolioId&quot;,&quot;ProgrammeId&quot;,&quot;RegionId&quot;,&quot;AreaId&quot;,&quot;UseExistingProject&quot;,&quot;Step1Status&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def progErr = vars.get(&quot;err_programmeId&quot;) ?: &quot;NOT_FOUND&quot;
def incomingErr = vars.get(&quot;err_incomingEstReq&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;

// Log to JMeter GUI
log.info(&quot;====================================&quot;)
log.info(&quot;📌 ProgrammeId Error: &quot; + progErr)
log.info(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
log.info(&quot;📌 Title: &quot; + titleErr)
log.info(&quot;====================================&quot;)

// Log to console (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 ProgrammeId Error: &quot; + progErr)
println(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
println(&quot;📌 Title: &quot; + titleErr)
println(&quot;====================================&quot;)
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">err_programmeId;err_incomingEstReq;err_title</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.programmeId[0];$.errors.incomingEstReq[0];$.title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step 1: RegionId  incomingEstReq field is required.">
            <stringProp name="HTTPSampler.path">/api/v2/estimate-request/create</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;estimateName&quot;:&quot;test&quot;,&quot;portfolioId&quot;:407,&quot;programmeId&quot;:408,&quot;regionId&quot;:,&quot;areaId&quot;:3,&quot;UseExistingProject&quot;:1,&quot;step1Status&quot;:1,&quot;proposedFields&quot;:[&quot;EstimateName&quot;,&quot;PortfolioId&quot;,&quot;ProgrammeId&quot;,&quot;RegionId&quot;,&quot;AreaId&quot;,&quot;UseExistingProject&quot;,&quot;Step1Status&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def regErr = vars.get(&quot;err_regionId&quot;) ?: &quot;NOT_FOUND&quot;
def incomingErr = vars.get(&quot;err_incomingEstReq&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 RegionId Error: &quot; + regErr)
log.info(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
log.info(&quot;📌 Title: &quot; + titleErr)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 RegionId Error: &quot; + regErr)
println(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
println(&quot;📌 Title: &quot; + titleErr)
println(&quot;====================================&quot;)
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages">
              <stringProp name="JSONPostProcessor.referenceNames">err_regionId;incomingEstReq;title</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.regionId[0];$.errors.incomingEstReq[0];$.title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step 1:  AreaId  incomingEstReq field is required.">
            <stringProp name="HTTPSampler.path">/api/v2/estimate-request/create</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;estimateName&quot;:&quot;test&quot;,&quot;portfolioId&quot;:407,&quot;programmeId&quot;:408,&quot;regionId&quot;:27,&quot;areaId&quot;:,&quot;UseExistingProject&quot;:1,&quot;step1Status&quot;:1,&quot;proposedFields&quot;:[&quot;EstimateName&quot;,&quot;PortfolioId&quot;,&quot;ProgrammeId&quot;,&quot;RegionId&quot;,&quot;AreaId&quot;,&quot;UseExistingProject&quot;,&quot;Step1Status&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def areaErr = vars.get(&quot;err_areaId&quot;) ?: &quot;NOT_FOUND&quot;
def incomingErr = vars.get(&quot;err_incomingEstReq&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 AreaId Error: &quot; + areaErr)
log.info(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
log.info(&quot;📌 Title: &quot; + titleErr)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 AreaId Error: &quot; + areaErr)
println(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
println(&quot;📌 Title: &quot; + titleErr)
println(&quot;====================================&quot;)
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">err_areaId;err_incomingEstReq;err_title</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.areaId[0];$.errors.incomingEstReq[0];$.title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" Step 1: AreaId  incomingEstReq field is required.">
            <stringProp name="HTTPSampler.path">/api/v2/estimate-request/create</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;estimateName&quot;:&quot;test&quot;,&quot;portfolioId&quot;:407,&quot;programmeId&quot;:408,&quot;regionId&quot;:27,&quot;areaId&quot;:3,&quot;UseExistingProject&quot;:,&quot;step1Status&quot;:1,&quot;proposedFields&quot;:[&quot;EstimateName&quot;,&quot;PortfolioId&quot;,&quot;ProgrammeId&quot;,&quot;RegionId&quot;,&quot;AreaId&quot;,&quot;UseExistingProject&quot;,&quot;Step1Status&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def useProjErr = vars.get(&quot;err_useExistingProject&quot;) ?: &quot;NOT_FOUND&quot;
def incomingErr = vars.get(&quot;err_incomingEstReq&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 UseExistingProject Error: &quot; + useProjErr)
log.info(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
log.info(&quot;📌 Title: &quot; + titleErr)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 UseExistingProject Error: &quot; + useProjErr)
println(&quot;📌 IncomingEstReq Error: &quot; + incomingErr)
println(&quot;📌 Title: &quot; + titleErr)
println(&quot;====================================&quot;)
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">err_useExistingProject;err_incomingEstReq;err_title</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.UseExistingProject[0];$.errors.incomingEstReq[0];$.title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${authToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 2 - Choose Existing Project" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - ProjForEstimation" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/proj-for-est-req/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PortfolioId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${portfolioId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">PortfolioId</stringProp>
                  </elementProp>
                  <elementProp name="ProgrammeId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${programmeId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ProgrammeId</stringProp>
                  </elementProp>
                  <elementProp name="RegionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${regionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">RegionId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Estimate Request by ID" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/get-request-by-id/${estimateRequestId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step2: projectId The incomingEstReq field is required." enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;projectId&quot;:,&quot;OptionPhasePin&quot;:null,&quot;DevPhasePin&quot;:null,&quot;ConstPhasePin&quot;:null,&quot;OtherPhasePin&quot;:null,&quot;Area&quot;:null,&quot;Route&quot;:null,&quot;estimateRequestId&quot;:4316,&quot;Step2Status&quot;:1,&quot;step2Status&quot;:1,&quot;proposedFields&quot;:[&quot;ProjectId&quot;,&quot;OptionPhasePin&quot;,&quot;DevPhasePin&quot;,&quot;ConstPhasePin&quot;,&quot;OtherPhasePin&quot;,&quot;Area&quot;,&quot;Route&quot;,&quot;Step2Status&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def projectIdErr = vars.get(&quot;err_projectId&quot;) ?: &quot;NOT_FOUND&quot;
def incomingErr = vars.get(&quot;err_incomingEstReq&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 projectId Error: &quot; + projectIdErr)
log.info(&quot;📌 incomingEstReq Error: &quot; + incomingErr)
log.info(&quot;📌 Title: &quot; + titleErr)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 projectId Error: &quot; + projectIdErr)
println(&quot;📌 incomingEstReq Error: &quot; + incomingErr)
println(&quot;📌 Title: &quot; + titleErr)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">err_projectId;err_incomingEstReq;err_title</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.projectId[0]];$.errors.incomingEstReq[0];$.title</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step2: estimateRequestId  The incomingEstReq field is required." enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;projectId&quot;:447,&quot;OptionPhasePin&quot;:null,&quot;DevPhasePin&quot;:null,&quot;ConstPhasePin&quot;:null,&quot;OtherPhasePin&quot;:null,&quot;Area&quot;:null,&quot;Route&quot;:null,&quot;estimateRequestId&quot;:,&quot;Step2Status&quot;:1,&quot;step2Status&quot;:1,&quot;proposedFields&quot;:[&quot;ProjectId&quot;,&quot;OptionPhasePin&quot;,&quot;DevPhasePin&quot;,&quot;ConstPhasePin&quot;,&quot;OtherPhasePin&quot;,&quot;Area&quot;,&quot;Route&quot;,&quot;Step2Status&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
def incomingErr   = vars.get(&quot;err_incomingEstReq&quot;)   ?: &quot;NOT_FOUND&quot;
def estimateIdErr = vars.get(&quot;err_estimateRequestId&quot;) ?: &quot;NOT_FOUND&quot;

if (incomingErr != &quot;NOT_FOUND&quot; || estimateIdErr != &quot;NOT_FOUND&quot;) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;❌ Validation errors: incomingEstReq=${incomingErr}, estimateRequestId=${estimateIdErr}&quot;)
}
</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">err_estimateRequestId;err_incomingEstReq;err_title</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.estimateRequestId[0];$.errors.incomingEstReq[0];$.title</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted values from JSON Extractor
def incomingErr   = vars.get(&quot;err_incomingEstReq&quot;)   ?: &quot;NOT_FOUND&quot;
def estimateIdErr = vars.get(&quot;err_estimateRequestId&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr      = vars.get(&quot;err_title&quot;)            ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 incomingEstReq Error   : &quot; + incomingErr)
log.info(&quot;📌 estimateRequestId Error: &quot; + estimateIdErr)
log.info(&quot;📌 Title                  : &quot; + titleErr)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 incomingEstReq Error   : &quot; + incomingErr)
println(&quot;📌 estimateRequestId Error: &quot; + estimateIdErr)
println(&quot;📌 Title                  : &quot; + titleErr)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step2: Mandatory fields are missing" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;projectId&quot;:447,&quot;OptionPhasePin&quot;:null,&quot;DevPhasePin&quot;:null,&quot;ConstPhasePin&quot;:null,&quot;OtherPhasePin&quot;:null,&quot;Area&quot;:null,&quot;Route&quot;:null,&quot;estimateRequestId&quot;:4316,&quot;Step2Status&quot;:1,&quot;step2Status&quot;:1,&quot;proposedFields&quot;:[&quot;&quot;,&quot;&quot;,&quot;DevPhasePin&quot;,&quot;ConstPhasePin&quot;,&quot;OtherPhasePin&quot;,&quot;Area&quot;,&quot;Route&quot;,&quot;Step2Status&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def errorsErr  = vars.get(&quot;err_errors&quot;)  ?: &quot;NOT_FOUND&quot;

if (errorsErr != &quot;NOT_FOUND&quot;) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;❌ Validation Error: &quot; + errorsErr)
}
</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">err_message;err_errors</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.message;$.errors</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted values from JSON Extractor
def messageErr = vars.get(&quot;err_message&quot;) ?: &quot;NOT_FOUND&quot;
def errorsErr  = vars.get(&quot;err_errors&quot;)  ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 Message : &quot; + messageErr)
log.info(&quot;📌 Errors  : &quot; + errorsErr)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 Message : &quot; + messageErr)
println(&quot;📌 Errors  : &quot; + errorsErr)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step2: Project Id&apos; must not be empty" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;OptionPhasePin&quot;:null,&quot;DevPhasePin&quot;:null,&quot;ConstPhasePin&quot;:null,&quot;OtherPhasePin&quot;:null,&quot;Area&quot;:null,&quot;Route&quot;:null,&quot;estimateRequestId&quot;:4316,&quot;Step2Status&quot;:1,&quot;step2Status&quot;:1,&quot;proposedFields&quot;:[&quot;ProjectId&quot;,&quot;OptionPhasePin&quot;,&quot;DevPhasePin&quot;,&quot;ConstPhasePin&quot;,&quot;OtherPhasePin&quot;,&quot;Area&quot;,&quot;Route&quot;,&quot;Step2Status&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">err_ProjectId;err_title;err_status</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.ProjectId[0];$.title;$.status</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted values from JSON Extractor
def projectIdErr = vars.get(&quot;err_ProjectId&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr     = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;
def statusErr    = vars.get(&quot;err_status&quot;) ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 ProjectId Error : &quot; + projectIdErr)
log.info(&quot;📌 Title           : &quot; + titleErr)
log.info(&quot;📌 Status          : &quot; + statusErr)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 ProjectId Error : &quot; + projectIdErr)
println(&quot;📌 Title           : &quot; + titleErr)
println(&quot;📌 Status          : &quot; + statusErr)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step2: Nullable object must have a value" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;projectId&quot;:447,&quot;OptionPhasePin&quot;:null,&quot;DevPhasePin&quot;:null,&quot;ConstPhasePin&quot;:null,&quot;OtherPhasePin&quot;:null,&quot;Area&quot;:null,&quot;Route&quot;:null,&quot;Step2Status&quot;:1,&quot;step2Status&quot;:1,&quot;proposedFields&quot;:[&quot;ProjectId&quot;,&quot;OptionPhasePin&quot;,&quot;DevPhasePin&quot;,&quot;ConstPhasePin&quot;,&quot;OtherPhasePin&quot;,&quot;Area&quot;,&quot;Route&quot;,&quot;Step2Status&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">err_message;err_errors</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.message;$.errors</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted values from JSON Extractor
def messageErr = vars.get(&quot;err_message&quot;) ?: &quot;NOT_FOUND&quot;
def errorsErr  = vars.get(&quot;err_errors&quot;)  ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 Message : &quot; + messageErr)
log.info(&quot;📌 Errors  : &quot; + errorsErr)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 Message : &quot; + messageErr)
println(&quot;📌 Errors  : &quot; + errorsErr)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 3 - Select Estimate Types &amp; Development Phase" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Estimate Type List " enabled="true">
              <stringProp name="HTTPSampler.path">api/v2/estimate-type/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Life Cycle Stage List " enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/life-cycle-stage/list</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Estimate Request by ID" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/get-request-by-id/${estimateRequestId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Development Phase id" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/development-phase/get?estimateTypeId=${outputId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response from previous sampler
def response = prev.getResponseDataAsString()

// Get the levelOfEstimateDescription from user-defined variable
def estimateDesc = vars.get(&quot;LEVEL_OF_ESTIMATE_DESC&quot;) ?: &quot;LEVEL_DESC_NOT_SET&quot;

// Structured logging
log.info(&quot;============================================================&quot;)
log.info(&quot;📊 JSR223 PostProcessor - levelOfEstimateId Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Estimate Description : ${estimateDesc}&quot;)

try {
    // JSONPath query to find the levelOfEstimateId for the matching description
    def estimateIdList = JsonPath.read(response, &apos;$.data[?(@.levelOfEstimateDescription == &quot;&apos; + estimateDesc + &apos;&quot;)].levelOfEstimateId&apos;)

    if (estimateIdList &amp;&amp; estimateIdList.size() &gt; 0) {
        def estimateId = estimateIdList[0]
        log.info(&quot;✅ Extracted levelOfEstimateId : ${estimateId}&quot;)

        // Store as JMeter variable
        vars.put(&quot;levelOfEstimateId&quot;, estimateId.toString())
    } else {
        log.warn(&quot;⚠️ No matching levelOfEstimateDescription found for: ${estimateDesc}&quot;)
        vars.put(&quot;levelOfEstimateId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error extracting levelOfEstimateId: &quot; + e.getMessage())
    vars.put(&quot;levelOfEstimateId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Estimate Types &amp; Development phase" enabled="false">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: ${estimateRequestId},&#xd;
    &quot;estimateTypeId&quot;: ${outputId},&#xd;
    &quot;devPhaseId&quot;: ${levelOfEstimateId},&#xd;
    &quot;step3Status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;EstimateTypeId&quot;,&#xd;
        &quot;DevPhaseId&quot;,&#xd;
        &quot;Step3Status&quot;&#xd;
    ]&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step3: The incomingEstReq field &quot;estimateRequestId&quot; is required" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: ,&#xd;
    &quot;estimateTypeId&quot;: 7,&#xd;
    &quot;devPhaseId&quot;: 1,&#xd;
    &quot;step3Status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;EstimateTypeId&quot;,&#xd;
        &quot;DevPhaseId&quot;,&#xd;
        &quot;Step3Status&quot;&#xd;
    ]&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">err_incomingEstReq;err_estReqId;err_title;err_status</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.incomingEstReq[0];$.errors.estimateRequestId[0];$.title;$.status</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted values
def incomingEstReq = vars.get(&quot;err_incomingEstReq&quot;) ?: &quot;NOT_FOUND&quot;
def estReqIdErr    = vars.get(&quot;err_estReqId&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr       = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;
def statusCode     = vars.get(&quot;err_status&quot;) ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 IncomingEstReq Error : &quot; + incomingEstReq)
log.info(&quot;📌 EstimateRequestId Error : &quot; + estReqIdErr)
log.info(&quot;📌 Title   : &quot; + titleErr)
log.info(&quot;📌 Status  : &quot; + statusCode)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 IncomingEstReq Error : &quot; + incomingEstReq)
println(&quot;📌 EstimateRequestId Error : &quot; + estReqIdErr)
println(&quot;📌 Title   : &quot; + titleErr)
println(&quot;📌 Status  : &quot; + statusCode)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step3: The incomingEstReq field &quot;estimateTypeId&quot; is required" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: ,&#xd;
    &quot;estimateTypeId&quot;: 7,&#xd;
    &quot;devPhaseId&quot;: 1,&#xd;
    &quot;step3Status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;EstimateTypeId&quot;,&#xd;
        &quot;DevPhaseId&quot;,&#xd;
        &quot;Step3Status&quot;&#xd;
    ]&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">err_estimateTypeId;err_incomingEstReq;err_title;err_status</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.estimateTypeId[0];$.errors.incomingEstReq[0];$.title;$.status</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted values
def errEstimateType = vars.get(&quot;err_estimateTypeId&quot;) ?: &quot;NOT_FOUND&quot;
def errIncomingReq  = vars.get(&quot;err_incomingEstReq&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr        = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;
def statusCode      = vars.get(&quot;err_status&quot;) ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 EstimateTypeId Error : &quot; + errEstimateType)
log.info(&quot;📌 IncomingEstReq Error : &quot; + errIncomingReq)
log.info(&quot;📌 Title   : &quot; + titleErr)
log.info(&quot;📌 Status  : &quot; + statusCode)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 EstimateTypeId Error : &quot; + errEstimateType)
println(&quot;📌 IncomingEstReq Error : &quot; + errIncomingReq)
println(&quot;📌 Title   : &quot; + titleErr)
println(&quot;📌 Status  : &quot; + statusCode)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step3: The incomingEstReq field &quot;devPhaseId&quot; is required" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: 4332,&#xd;
    &quot;estimateTypeId&quot;: 7,&#xd;
    &quot;devPhaseId&quot;: ,&#xd;
    &quot;step3Status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;EstimateTypeId&quot;,&#xd;
        &quot;DevPhaseId&quot;,&#xd;
        &quot;Step3Status&quot;&#xd;
    ]&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">err_devPhaseId;err_incomingEstReq;err_title;err_status</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.devPhaseId[0];$.errors.incomingEstReq[0];$.title;$.status</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted values
def errDevPhase     = vars.get(&quot;err_devPhaseId&quot;) ?: &quot;NOT_FOUND&quot;
def errIncomingReq  = vars.get(&quot;err_incomingEstReq&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr        = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;
def statusCode      = vars.get(&quot;err_status&quot;) ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 DevPhaseId Error : &quot; + errDevPhase)
log.info(&quot;📌 IncomingEstReq Error : &quot; + errIncomingReq)
log.info(&quot;📌 Title   : &quot; + titleErr)
log.info(&quot;📌 Status  : &quot; + statusCode)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 DevPhaseId Error : &quot; + errDevPhase)
println(&quot;📌 IncomingEstReq Error : &quot; + errIncomingReq)
println(&quot;📌 Title   : &quot; + titleErr)
println(&quot;📌 Status  : &quot; + statusCode)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step3: The ProposedFields field is required." enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: 4332,&#xd;
    &quot;estimateTypeId&quot;: 7,&#xd;
    &quot;devPhaseId&quot;: 1,&#xd;
    &quot;step3Status&quot;: 1,&#xd;
   &#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">err_proposedFields;err_title;err_status;err_traceId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.ProposedFields[0];$.title;$.status;$.traceId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted values
def errProposed   = vars.get(&quot;err_proposedFields&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr      = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;
def statusCode    = vars.get(&quot;err_status&quot;) ?: &quot;NOT_FOUND&quot;
def traceIdVal    = vars.get(&quot;err_traceId&quot;) ?: &quot;NOT_FOUND&quot;

// GUI log
log.info(&quot;====================================&quot;)
log.info(&quot;📌 ProposedFields Error : &quot; + errProposed)
log.info(&quot;📌 Title   : &quot; + titleErr)
log.info(&quot;📌 Status  : &quot; + statusCode)
log.info(&quot;📌 TraceId : &quot; + traceIdVal)
log.info(&quot;====================================&quot;)

// Console log (non-GUI mode)
println(&quot;====================================&quot;)
println(&quot;📌 ProposedFields Error : &quot; + errProposed)
println(&quot;📌 Title   : &quot; + titleErr)
println(&quot;📌 Status  : &quot; + statusCode)
println(&quot;📌 TraceId : &quot; + traceIdVal)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 4 - Specify Number of Estimates"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Scenarios" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/scenario-lib/get-all</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.jayway.jsonpath.JsonPath

// Get response from the previous sampler
def response = prev.getResponseDataAsString()

// Get the scenario description from the variable
def scenarioDesc = vars.get(&quot;SCENARIO_DESC&quot;) ?: &quot;SCENARIO_DESC_NOT_SET&quot;

// Structured Logging
log.info(&quot;============================================================&quot;)
log.info(&quot;📘 JSR223 PostProcessor - scenarioLibraryId Extraction&quot;)
log.info(&quot;------------------------------------------------------------&quot;)
log.info(&quot;🔍 Target Scenario Description : ${scenarioDesc}&quot;)

try {
    // Use JSONPath to find scenarioLibraryId where name matches scenarioDesc
    def scenarioIdList = JsonPath.read(response, &apos;$.data[?(@.name == &quot;&apos; + scenarioDesc + &apos;&quot;)].scenarioLibraryId&apos;)

    if (scenarioIdList &amp;&amp; scenarioIdList.size() &gt; 0) {
        def scenarioLibraryId = scenarioIdList[0]
        log.info(&quot;✅ Extracted scenarioLibraryId : ${scenarioLibraryId}&quot;)

        // Store in JMeter variable
        vars.put(&quot;scenarioLibraryId&quot;, scenarioLibraryId.toString())
    } else {
        log.warn(&quot;⚠️ No matching scenario name found for: ${scenarioDesc}&quot;)
        vars.put(&quot;scenarioLibraryId&quot;, &quot;NOT_FOUND&quot;)
    }
} catch (Exception e) {
    log.error(&quot;❌ Error extracting scenarioLibraryId: &quot; + e.getMessage())
    vars.put(&quot;scenarioLibraryId&quot;, &quot;EXTRACTION_ERROR&quot;)
}

log.info(&quot;============================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Estimate request" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/get-request-by-id/${estimateRequestId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Estimate Type" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-type/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step4: ProposedFields cannot be empty. At least one field must be specified." enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;outputTypeEnum&quot;: 0,&#xd;
  &quot;estimateRequestId&quot;: 4333,&#xd;
  &quot;numberOfEstimates&quot;: 3,&#xd;
  &quot;estimateRequestPlan&quot;: [{&quot;name&quot;:&quot;EstimatePlan_202508_1755498612058&quot;,&quot;dueDate&quot;:&quot;2025-08-19&quot;,&quot;purpose&quot;:&quot;Project estimate&quot;,&quot;scenarioId&quot;:2,&quot;startDate&quot;:&quot;2025-08-18&quot;,&quot;endDate&quot;:&quot;2025-08-28&quot;,&quot;isDeleted&quot;:0},{&quot;name&quot;:&quot;EstimatePlan_202508_1755498612059&quot;,&quot;dueDate&quot;:&quot;2025-08-21&quot;,&quot;purpose&quot;:&quot;Project estimate&quot;,&quot;scenarioId&quot;:2,&quot;startDate&quot;:&quot;2025-08-20&quot;,&quot;endDate&quot;:&quot;2025-08-30&quot;,&quot;isDeleted&quot;:0},{&quot;name&quot;:&quot;EstimatePlan_202508_1755498612059&quot;,&quot;dueDate&quot;:&quot;2025-08-23&quot;,&quot;purpose&quot;:&quot;Project estimate&quot;,&quot;scenarioId&quot;:2,&quot;startDate&quot;:&quot;2025-08-22&quot;,&quot;endDate&quot;:&quot;2025-09-01&quot;,&quot;isDeleted&quot;:0}],&#xd;
  &quot;step4Status&quot;: 1,&#xd;
  &quot;proposedFields&quot;: [&#xd;
&#xd;
  ]&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages">
                <stringProp name="JSONPostProcessor.referenceNames">err_status_code;err_message</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.StatusCode;$.Message</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted Error values
def errProposed = vars.get(&quot;err_proposedFields&quot;) ?: &quot;NOT_FOUND&quot;
def titleErr    = vars.get(&quot;err_title&quot;) ?: &quot;NOT_FOUND&quot;
def statusCode  = vars.get(&quot;err_status&quot;) ?: &quot;NOT_FOUND&quot;
def traceIdVal  = vars.get(&quot;err_traceId&quot;) ?: &quot;NOT_FOUND&quot;

// Extracted Success values
def estReqId    = vars.get(&quot;succ_estReqId&quot;) ?: &quot;NOT_FOUND&quot;
def numEst      = vars.get(&quot;succ_numEstimates&quot;) ?: &quot;NOT_FOUND&quot;
def planName    = vars.get(&quot;succ_planName&quot;) ?: &quot;NOT_FOUND&quot;
def step4Stat   = vars.get(&quot;succ_step4Status&quot;) ?: &quot;NOT_FOUND&quot;

// ============================
// GUI log
// ============================
log.info(&quot;====================================&quot;)
log.info(&quot;📌 ERROR RESPONSE&quot;)
log.info(&quot;ProposedFields Error : &quot; + errProposed)
log.info(&quot;Title   : &quot; + titleErr)
log.info(&quot;Status  : &quot; + statusCode)
log.info(&quot;TraceId : &quot; + traceIdVal)
log.info(&quot;------------------------------------&quot;)
log.info(&quot;📌 SUCCESS RESPONSE&quot;)
log.info(&quot;EstimateRequestId : &quot; + estReqId)
log.info(&quot;NumberOfEstimates : &quot; + numEst)
log.info(&quot;PlanName          : &quot; + planName)
log.info(&quot;Step4Status       : &quot; + step4Stat)
log.info(&quot;====================================&quot;)

// ============================
// Console log (non-GUI mode)
// ============================
println(&quot;====================================&quot;)
println(&quot;📌 ERROR RESPONSE&quot;)
println(&quot;ProposedFields Error : &quot; + errProposed)
println(&quot;Title   : &quot; + titleErr)
println(&quot;Status  : &quot; + statusCode)
println(&quot;TraceId : &quot; + traceIdVal)
println(&quot;------------------------------------&quot;)
println(&quot;📌 SUCCESS RESPONSE&quot;)
println(&quot;EstimateRequestId : &quot; + estReqId)
println(&quot;NumberOfEstimates : &quot; + numEst)
println(&quot;PlanName          : &quot; + planName)
println(&quot;Step4Status       : &quot; + step4Stat)
println(&quot;====================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step4: The incomingEstReq field &quot;estimateRequestId &quot;  is required" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;outputTypeEnum&quot;: 0,&#xd;
  &quot;estimateRequestId&quot;: ,&#xd;
  &quot;numberOfEstimates&quot;: 3,&#xd;
  &quot;estimateRequestPlan&quot;: [{&quot;name&quot;:&quot;EstimatePlan_202508_1755498612058&quot;,&quot;dueDate&quot;:&quot;2025-08-19&quot;,&quot;purpose&quot;:&quot;Project estimate&quot;,&quot;scenarioId&quot;:2,&quot;startDate&quot;:&quot;2025-08-18&quot;,&quot;endDate&quot;:&quot;2025-08-28&quot;,&quot;isDeleted&quot;:0},{&quot;name&quot;:&quot;EstimatePlan_202508_1755498612059&quot;,&quot;dueDate&quot;:&quot;2025-08-21&quot;,&quot;purpose&quot;:&quot;Project estimate&quot;,&quot;scenarioId&quot;:2,&quot;startDate&quot;:&quot;2025-08-20&quot;,&quot;endDate&quot;:&quot;2025-08-30&quot;,&quot;isDeleted&quot;:0},{&quot;name&quot;:&quot;EstimatePlan_202508_1755498612059&quot;,&quot;dueDate&quot;:&quot;2025-08-23&quot;,&quot;purpose&quot;:&quot;Project estimate&quot;,&quot;scenarioId&quot;:2,&quot;startDate&quot;:&quot;2025-08-22&quot;,&quot;endDate&quot;:&quot;2025-09-01&quot;,&quot;isDeleted&quot;:0}],&#xd;
  &quot;step4Status&quot;: 1,&#xd;
  &quot;proposedFields&quot;: [&#xd;
    &quot;OutputTypeEnum&quot;,&#xd;
    &quot;EstimateRequestId&quot;,&#xd;
    &quot;NumberOfEstimates&quot;,&#xd;
    &quot;EstimateRequestPlan&quot;,&#xd;
    &quot;Step4Status&quot;&#xd;
  ]&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">traceId;errorMsg1;errorMsg2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.traceId;$.errors.incomingEstReq[0];$.errors.estimateRequestId[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Get extracted values
def traceId = vars.get(&quot;traceId&quot;) ?: &quot;NOT_FOUND&quot;
def errorMsg1 = vars.get(&quot;errorMsg1&quot;) ?: &quot;NOT_FOUND&quot;
def errorMsg2 = vars.get(&quot;errorMsg2&quot;) ?: &quot;NOT_FOUND&quot;

// Structured Logging
log.info(&quot;====================================================&quot;)
log.info(&quot;📘 Validation Error Extracted from Response&quot;)
log.info(&quot;TraceId   : &quot; + traceId)
log.info(&quot;Error #1  : &quot; + errorMsg1)
log.info(&quot;Error #2  : &quot; + errorMsg2)
log.info(&quot;====================================================&quot;)

// Print in Console (Non-GUI mode)
println(&quot;====================================================&quot;)
println(&quot;📘 Validation Error Extracted from Response&quot;)
println(&quot;TraceId   : &quot; + traceId)
println(&quot;Error #1  : &quot; + errorMsg1)
println(&quot;Error #2  : &quot; + errorMsg2)
println(&quot;====================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step4: The number of Estimate Request Plan must match the Number of Estimates." enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;outputTypeEnum&quot;: 0,&#xd;
  &quot;estimateRequestId&quot;: 4333,&#xd;
  &quot;numberOfEstimates&quot;: 3,&#xd;
  &quot;estimateRequestPlan&quot;: [],&#xd;
  &quot;step4Status&quot;: 1,&#xd;
  &quot;proposedFields&quot;: [&#xd;
    &quot;OutputTypeEnum&quot;,&#xd;
    &quot;EstimateRequestId&quot;,&#xd;
    &quot;NumberOfEstimates&quot;,&#xd;
    &quot;EstimateRequestPlan&quot;,&#xd;
    &quot;Step4Status&quot;&#xd;
  ]&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">errMsg;errTitle;errStatus;traceId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.EstimateRequestPlan[0];$.title;$.status;$.traceId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def errMsg   = vars.get(&quot;errMsg&quot;)   ?: &quot;NOT_FOUND&quot;
def errTitle = vars.get(&quot;errTitle&quot;) ?: &quot;NOT_FOUND&quot;
def errStatus= vars.get(&quot;errStatus&quot;)?: &quot;NOT_FOUND&quot;
def traceId  = vars.get(&quot;traceId&quot;)  ?: &quot;NOT_FOUND&quot;

// Structured logging in JMeter GUI
log.info(&quot;====================================================&quot;)
log.info(&quot;📘 Validation Error Response Extracted&quot;)
log.info(&quot;Title     : &quot; + errTitle)
log.info(&quot;Status    : &quot; + errStatus)
log.info(&quot;TraceId   : &quot; + traceId)
log.info(&quot;Error Msg : &quot; + errMsg)
log.info(&quot;====================================================&quot;)

// Console output (for non-GUI mode runs)
println(&quot;====================================================&quot;)
println(&quot;📘 Validation Error Response Extracted&quot;)
println(&quot;Title     : &quot; + errTitle)
println(&quot;Status    : &quot; + errStatus)
println(&quot;TraceId   : &quot; + traceId)
println(&quot;Error Msg : &quot; + errMsg)
println(&quot;====================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step4: The incomingEstReq field &quot;step4Status &quot;  is required " enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;outputTypeEnum&quot;: 0,&#xd;
  &quot;estimateRequestId&quot;: 4333,&#xd;
  &quot;numberOfEstimates&quot;: 3,&#xd;
  &quot;estimateRequestPlan&quot;: [{&quot;name&quot;:&quot;EstimatePlan_202508_1755498612058&quot;,&quot;dueDate&quot;:&quot;2025-08-19&quot;,&quot;purpose&quot;:&quot;Project estimate&quot;,&quot;scenarioId&quot;:2,&quot;startDate&quot;:&quot;2025-08-18&quot;,&quot;endDate&quot;:&quot;2025-08-28&quot;,&quot;isDeleted&quot;:0},{&quot;name&quot;:&quot;EstimatePlan_202508_1755498612059&quot;,&quot;dueDate&quot;:&quot;2025-08-21&quot;,&quot;purpose&quot;:&quot;Project estimate&quot;,&quot;scenarioId&quot;:2,&quot;startDate&quot;:&quot;2025-08-20&quot;,&quot;endDate&quot;:&quot;2025-08-30&quot;,&quot;isDeleted&quot;:0},{&quot;name&quot;:&quot;EstimatePlan_202508_1755498612059&quot;,&quot;dueDate&quot;:&quot;2025-08-23&quot;,&quot;purpose&quot;:&quot;Project estimate&quot;,&quot;scenarioId&quot;:2,&quot;startDate&quot;:&quot;2025-08-22&quot;,&quot;endDate&quot;:&quot;2025-09-01&quot;,&quot;isDeleted&quot;:0}],&#xd;
  &quot;step4Status&quot;: ,&#xd;
  &quot;proposedFields&quot;: [&#xd;
    &quot;OutputTypeEnum&quot;,&#xd;
    &quot;EstimateRequestId&quot;,&#xd;
    &quot;NumberOfEstimates&quot;,&#xd;
    &quot;EstimateRequestPlan&quot;,&#xd;
    &quot;Step4Status&quot;&#xd;
  ]&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">errStep4;errIncoming;errTitle;errStatus;traceId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.step4Status[0];$.errors.incomingEstReq[0];$.title;$.status;$.traceId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def errStep4   = vars.get(&quot;errStep4&quot;)   ?: &quot;NOT_FOUND&quot;
def errIncoming= vars.get(&quot;errIncoming&quot;)?: &quot;NOT_FOUND&quot;
def errTitle   = vars.get(&quot;errTitle&quot;)   ?: &quot;NOT_FOUND&quot;
def errStatus  = vars.get(&quot;errStatus&quot;)  ?: &quot;NOT_FOUND&quot;
def traceId    = vars.get(&quot;traceId&quot;)    ?: &quot;NOT_FOUND&quot;

// Structured logging in JMeter GUI log
log.info(&quot;====================================================&quot;)
log.info(&quot;📘 Validation Error Response Extracted&quot;)
log.info(&quot;Title        : &quot; + errTitle)
log.info(&quot;Status Code  : &quot; + errStatus)
log.info(&quot;TraceId      : &quot; + traceId)
log.info(&quot;Error Step4  : &quot; + errStep4)
log.info(&quot;Error IncomingEstReq : &quot; + errIncoming)
log.info(&quot;====================================================&quot;)

// Console output (for non-GUI mode runs)
println(&quot;====================================================&quot;)
println(&quot;📘 Validation Error Response Extracted&quot;)
println(&quot;Title        : &quot; + errTitle)
println(&quot;Status Code  : &quot; + errStatus)
println(&quot;TraceId      : &quot; + traceId)
println(&quot;Error Step4  : &quot; + errStep4)
println(&quot;Error IncomingEstReq : &quot; + errIncoming)
println(&quot;====================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 5 - Upload Any Supporting Documents"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step5: The incomingEstReq field &quot;estimateRequestId &quot;  is required " enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: ,&#xd;
    &quot;step5Status&quot;: 1,&#xd;
    &quot;tempDocIds&quot;: [],&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;Step5Status&quot;,&#xd;
        &quot;TempDocIds&quot;&#xd;
    ]&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">errEstReqId;errIncoming;errTitle;errStatus;traceId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.estimateRequestId[0];$.errors.incomingEstReq[0];$.title;$.status;$.traceId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def errIncoming = vars.get(&quot;errIncoming&quot;)   ?: &quot;NOT_FOUND&quot;
def errEstReqId = vars.get(&quot;errEstReqId&quot;)   ?: &quot;NOT_FOUND&quot;
def errTitle    = vars.get(&quot;errTitle&quot;)      ?: &quot;NOT_FOUND&quot;
def errStatus   = vars.get(&quot;errStatus&quot;)     ?: &quot;NOT_FOUND&quot;
def traceId     = vars.get(&quot;traceId&quot;)       ?: &quot;NOT_FOUND&quot;

// Structured logging in JMeter GUI log
log.info(&quot;====================================================&quot;)
log.info(&quot;📘 Validation Error Response Extracted&quot;)
log.info(&quot;Title          : &quot; + errTitle)
log.info(&quot;Status Code    : &quot; + errStatus)
log.info(&quot;TraceId        : &quot; + traceId)
log.info(&quot;Error Incoming : &quot; + errIncoming)
log.info(&quot;Error EstReqId : &quot; + errEstReqId)
log.info(&quot;====================================================&quot;)

// Console output (for non-GUI mode runs)
println(&quot;====================================================&quot;)
println(&quot;📘 Validation Error Response Extracted&quot;)
println(&quot;Title          : &quot; + errTitle)
println(&quot;Status Code    : &quot; + errStatus)
println(&quot;TraceId        : &quot; + traceId)
println(&quot;Error Incoming : &quot; + errIncoming)
println(&quot;Error EstReqId : &quot; + errEstReqId)
println(&quot;====================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step5: The incomingEstReq field &quot;step5Status &quot;  is required " enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: 4333,&#xd;
    &quot;step5Status&quot;: ,&#xd;
    &quot;tempDocIds&quot;: [],&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;Step5Status&quot;,&#xd;
        &quot;TempDocIds&quot;&#xd;
    ]&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">errStep5;errIncoming;errTitle;errStatus;traceId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.step5Status[0];$.errors.incomingEstReq[0];$.title;$.status;$.traceId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def errStep5    = vars.get(&quot;errStep5&quot;)    ?: &quot;NOT_FOUND&quot;
def errIncoming = vars.get(&quot;errIncoming&quot;) ?: &quot;NOT_FOUND&quot;
def errTitle    = vars.get(&quot;errTitle&quot;)    ?: &quot;NOT_FOUND&quot;
def errStatus   = vars.get(&quot;errStatus&quot;)   ?: &quot;NOT_FOUND&quot;
def traceId     = vars.get(&quot;traceId&quot;)     ?: &quot;NOT_FOUND&quot;

// Structured logging in JMeter GUI log
log.info(&quot;====================================================&quot;)
log.info(&quot;📘 Validation Error Response Extracted&quot;)
log.info(&quot;Title          : &quot; + errTitle)
log.info(&quot;Status Code    : &quot; + errStatus)
log.info(&quot;TraceId        : &quot; + traceId)
log.info(&quot;Error Step5    : &quot; + errStep5)
log.info(&quot;Error Incoming : &quot; + errIncoming)
log.info(&quot;====================================================&quot;)

// Console output (for non-GUI mode runs)
println(&quot;====================================================&quot;)
println(&quot;📘 Validation Error Response Extracted&quot;)
println(&quot;Title          : &quot; + errTitle)
println(&quot;Status Code    : &quot; + errStatus)
println(&quot;TraceId        : &quot; + traceId)
println(&quot;Error Step5    : &quot; + errStep5)
println(&quot;Error Incoming : &quot; + errIncoming)
println(&quot;====================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step5: ProposedFields cannot be empty" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: 4333,&#xd;
    &quot;step5Status&quot;: 1,&#xd;
    &quot;tempDocIds&quot;: [],&#xd;
    &quot;proposedFields&quot;: [&#xd;
       &#xd;
    ]&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">errStatus;errMessage</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.StatusCode;$.Message</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def errStatus   = vars.get(&quot;errStatus&quot;)   ?: &quot;NOT_FOUND&quot;
def errMessage  = vars.get(&quot;errMessage&quot;)  ?: &quot;NOT_FOUND&quot;

// Structured logging in JMeter GUI log
log.info(&quot;====================================================&quot;)
log.info(&quot;📘 Error Response Extracted&quot;)
log.info(&quot;Status Code   : &quot; + errStatus)
log.info(&quot;Message       : &quot; + errMessage)
log.info(&quot;====================================================&quot;)

// Console output (for non-GUI mode runs)
println(&quot;====================================================&quot;)
println(&quot;📘 Error Response Extracted&quot;)
println(&quot;Status Code   : &quot; + errStatus)
println(&quot;Message       : &quot; + errMessage)
println(&quot;====================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step 6 - Project Governance"/>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step6: The incomingEstReq field &quot;estimateRequestId&quot; is required." enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateGovernanceComments&quot;: &quot;test&quot;,&#xd;
    &quot;generalComments&quot;: &quot;test&quot;,&#xd;
    &quot;estimateRequestReason&quot;: &quot;test&quot;,&#xd;
    &quot;governanceMeetingDate&quot;: null,&#xd;
    &quot;projectManagerName&quot;: &quot;&quot;,&#xd;
    &quot;projectManagerEmployer&quot;: &quot;&quot;,&#xd;
    &quot;projectManagerContactNumber&quot;: &quot;&quot;,&#xd;
    &quot;projectManagerEmailAddress&quot;: &quot;&quot;,&#xd;
    &quot;assistantProjectManager&quot;: &quot;&quot;,&#xd;
    &quot;assistantProjectManagerContactNumber&quot;: &quot;&quot;,&#xd;
    &quot;assistantProjectManagerEmail&quot;: &quot;&quot;,&#xd;
    &quot;step6Status&quot;: 1,&#xd;
    &quot;estimateRequestId&quot;: ,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateGovernanceComments&quot;,&#xd;
        &quot;GeneralComments&quot;,&#xd;
        &#xd;
        &quot;EstimateRequestReason&quot;,&#xd;
        &quot;GovernanceMeetingDate&quot;,&#xd;
        &quot;ProjectManagerName&quot;,&#xd;
        &quot;ProjectManagerEmployer&quot;,&#xd;
        &quot;ProjectManagerContactNumber&quot;,&#xd;
        &quot;ProjectManagerEmailAddress&quot;,&#xd;
        &quot;AssistantProjectManager&quot;,&#xd;
        &quot;AssistantProjectManagerContactNumber&quot;,&#xd;
        &quot;AssistantProjectManagerEmail&quot;,&#xd;
        &quot;Step6Status&quot;&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages">
                <stringProp name="JSONPostProcessor.referenceNames">errIncoming;errEstReqId;errTitle;errStatus;traceId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors.incomingEstReq[0];$.errors.estimateRequestId[0];$.title;$.status;$.traceId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def errIncoming = vars.get(&quot;errIncoming&quot;)     ?: &quot;NOT_FOUND&quot;
def errEstReqId = vars.get(&quot;errEstReqId&quot;)     ?: &quot;NOT_FOUND&quot;
def errTitle    = vars.get(&quot;errTitle&quot;)        ?: &quot;NOT_FOUND&quot;
def errStatus   = vars.get(&quot;errStatus&quot;)       ?: &quot;NOT_FOUND&quot;
def traceId     = vars.get(&quot;traceId&quot;)         ?: &quot;NOT_FOUND&quot;

// Structured logging in JMeter GUI log
log.info(&quot;====================================================&quot;)
log.info(&quot;📘 Validation Error Response Extracted&quot;)
log.info(&quot;Title              : &quot; + errTitle)
log.info(&quot;Status Code        : &quot; + errStatus)
log.info(&quot;TraceId            : &quot; + traceId)
log.info(&quot;Error Incoming     : &quot; + errIncoming)
log.info(&quot;Error EstimateReqId: &quot; + errEstReqId)
log.info(&quot;====================================================&quot;)

// Console output (for non-GUI mode runs)
println(&quot;====================================================&quot;)
println(&quot;📘 Validation Error Response Extracted&quot;)
println(&quot;Title              : &quot; + errTitle)
println(&quot;Status Code        : &quot; + errStatus)
println(&quot;TraceId            : &quot; + traceId)
println(&quot;Error Incoming     : &quot; + errIncoming)
println(&quot;Error EstimateReqId: &quot; + errEstReqId)
println(&quot;====================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step6: ProposedFields cannot be empty" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateGovernanceComments&quot;: &quot;&quot;,&#xd;
    &quot;generalComments&quot;: &quot;&quot;,&#xd;
    &quot;estimateRequestReason&quot;: &quot;&quot;,&#xd;
    &quot;governanceMeetingDate&quot;: null,&#xd;
    &quot;projectManagerName&quot;: &quot;&quot;,&#xd;
    &quot;projectManagerEmployer&quot;: &quot;&quot;,&#xd;
    &quot;projectManagerContactNumber&quot;: &quot;&quot;,&#xd;
    &quot;projectManagerEmailAddress&quot;: &quot;&quot;,&#xd;
    &quot;assistantProjectManager&quot;: &quot;&quot;,&#xd;
    &quot;assistantProjectManagerContactNumber&quot;: &quot;&quot;,&#xd;
    &quot;assistantProjectManagerEmail&quot;: &quot;&quot;,&#xd;
    &quot;step6Status&quot;: 1,&#xd;
    &quot;estimateRequestId&quot;: 4352,&#xd;
    &quot;proposedFields&quot;: [&#xd;
       &#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">respStatus;respMsg</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.StatusCode;$.Message</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def statusCode = vars.get(&quot;respStatus&quot;) ?: &quot;NOT_FOUND&quot;
def message    = vars.get(&quot;respMsg&quot;)    ?: &quot;NOT_FOUND&quot;

// Logging in JMeter GUI
log.info(&quot;===================================================&quot;)
log.info(&quot;📘 API Error Response Extracted&quot;)
log.info(&quot;Status Code : &quot; + statusCode)
log.info(&quot;Message     : &quot; + message)
log.info(&quot;===================================================&quot;)

// Logging to Console (non-GUI mode)
println(&quot;===================================================&quot;)
println(&quot;📘 API Error Response Extracted&quot;)
println(&quot;Status Code : &quot; + statusCode)
println(&quot;Message     : &quot; + message)
println(&quot;===================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Step7 : Submit request" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step7: The incomingEstReq field &quot;estimateRequestId&quot;  is required." enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: ,&#xd;
    &quot;status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;Step7Status&quot;,&#xd;
        &quot;ReviewComments&quot;,&#xd;
        &quot;Status&quot;&#xd;
    ],&#xd;
    &quot;step7Status&quot;: 1,&#xd;
    &quot;reviewComments&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">respTitle;respStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.title;$.status</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def title  = vars.get(&quot;respTitle&quot;) ?: &quot;NOT_FOUND&quot;
def status = vars.get(&quot;respStatus&quot;) ?: &quot;NOT_FOUND&quot;

// Logging in JMeter GUI
log.info(&quot;===================================================&quot;)
log.info(&quot;📘 API Validation Error Extracted&quot;)
log.info(&quot;Title       : &quot; + title)
log.info(&quot;Status Code : &quot; + status)
log.info(&quot;===================================================&quot;)

// Logging to Console (non-GUI mode)
println(&quot;===================================================&quot;)
println(&quot;📘 API Validation Error Extracted&quot;)
println(&quot;Title       : &quot; + title)
println(&quot;Status Code : &quot; + status)
println(&quot;===================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step7: The incomingEstReq field &quot;status&quot;  is required." enabled="true">
              <stringProp name="HTTPSampler.domainstringProp>
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: 4372,&#xd;
    &quot;status&quot;: ,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;Step7Status&quot;,&#xd;
        &quot;ReviewComments&quot;,&#xd;
        &quot;Status&quot;&#xd;
    ],&#xd;
    &quot;step7Status&quot;: 1,&#xd;
    &quot;reviewComments&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">respTitle;respStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.title;$.status</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def title  = vars.get(&quot;respTitle&quot;) ?: &quot;NOT_FOUND&quot;
def status = vars.get(&quot;respStatus&quot;) ?: &quot;NOT_FOUND&quot;

// Log to JMeter GUI (jmeter.log)
log.info(&quot;===================================================&quot;)
log.info(&quot;📘 API Validation Error Extracted&quot;)
log.info(&quot;Title       : &quot; + title)
log.info(&quot;Status Code : &quot; + status)
log.info(&quot;===================================================&quot;)

// Log to Console (when running in non-GUI mode)
println(&quot;===================================================&quot;)
println(&quot;📘 API Validation Error Extracted&quot;)
println(&quot;Title       : &quot; + title)
println(&quot;Status Code : &quot; + status)
println(&quot;===================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step7: The incomingEstReq field &quot;step7-status&quot;  is required." enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/estimate-request/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;estimateRequestId&quot;: 4372,&#xd;
    &quot;status&quot;: 1,&#xd;
    &quot;proposedFields&quot;: [&#xd;
        &quot;EstimateRequestId&quot;,&#xd;
        &quot;Step7Status&quot;,&#xd;
        &quot;ReviewComments&quot;,&#xd;
        &quot;Status&quot;&#xd;
    ],&#xd;
    &quot;step7Status&quot;: ,&#xd;
    &quot;reviewComments&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Error/Validation Messages" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">respTitle;respStatus;respErrStep7;respErrReq</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.title;$.status;$.errors.step7Status[0];$.errors.incomingEstReq[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0;0;0;0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Extracted variables
def title       = vars.get(&quot;respTitle&quot;) ?: &quot;NOT_FOUND&quot;
def status      = vars.get(&quot;respStatus&quot;) ?: &quot;NOT_FOUND&quot;
def errStep7    = vars.get(&quot;respErrStep7&quot;) ?: &quot;NOT_FOUND&quot;
def errIncoming = vars.get(&quot;respErrReq&quot;) ?: &quot;NOT_FOUND&quot;

// Log to JMeter GUI log
log.info(&quot;===================================================&quot;)
log.info(&quot;📘 API Validation Error Extracted&quot;)
log.info(&quot;Title        : &quot; + title)
log.info(&quot;Status Code  : &quot; + status)
log.info(&quot;Step7Status Error : &quot; + errStep7)
log.info(&quot;IncomingEstReq Error : &quot; + errIncoming)
log.info(&quot;===================================================&quot;)

// Log to Console (when running in non-GUI mode)
println(&quot;===================================================&quot;)
println(&quot;📘 API Validation Error Extracted&quot;)
println(&quot;Title        : &quot; + title)
println(&quot;Status Code  : &quot; + status)
println(&quot;Step7Status Error : &quot; + errStep7)
println(&quot;IncomingEstReq Error : &quot; + errIncoming)
println(&quot;===================================================&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time - 2 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
