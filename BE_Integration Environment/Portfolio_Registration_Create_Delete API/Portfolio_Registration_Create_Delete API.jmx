<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BenchMarkEstimation">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Portfolio Registrations">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp name="THREAD_COUNT" elementType="Argument">
              <stringProp name="Argument.name">THREAD_COUNT</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc"></stringProp>
            </elementProp>
            <elementProp name="RAMP_UP" elementType="Argument">
              <stringProp name="Argument.name">RAMP_UP</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LOOP_COUNT" elementType="Argument">
              <stringProp name="Argument.name">LOOP_COUNT</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">PROTOCOL</stringProp>
              <stringProp name="Argument.value">https</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="BASE_URL" elementType="Argument">
              <stringProp name="Argument.name">BASE_URL</stringProp>
              <stringProp name="Argument.value">v10-integration.dev.api.test.benchmarkestimating.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="API_VERSION" elementType="Argument">
              <stringProp name="Argument.name">API_VERSION</stringProp>
              <stringProp name="Argument.value">v2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Credentials ">
          <collectionProp name="Arguments.arguments">
            <elementProp name="USERNAME" elementType="Argument">
              <stringProp name="Argument.name">USERNAME</stringProp>
              <stringProp name="Argument.value">${__P(username,main)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(password,Welcome123)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="01_Authentication" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login_API">
            <stringProp name="HTTPSampler.path">/api/v2/auth/login</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${USERNAME}&quot;,&#xd;
    &quot;password&quot;: &quot;${PASSWORD}&quot;,&#xd;
    &quot;userType&quot;: &quot;string&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
import groovy.json.JsonSlurper

def username = vars.get(&quot;USERNAME&quot;) ?: &quot;USERNAME_NOT_SET&quot;
def password = vars.get(&quot;PASSWORD&quot;) ?: &quot;PASSWORD_NOT_SET&quot;
def authToken = &quot;AUTH_TOKEN_NOT_FOUND&quot;

// Parse only if response is not empty and contains JSON
def response = prev.getResponseDataAsString()

if (response &amp;&amp; response.trim().startsWith(&quot;{&quot;)) {
    try {
        def jsonSlurper = new JsonSlurper()
        def parsedJson = jsonSlurper.parseText(response)

        // Try to extract authToken from $.data
        authToken = parsedJson?.data ?: &quot;AUTH_TOKEN_NOT_FOUND&quot;
        vars.put(&quot;authToken&quot;, authToken.toString())

    } catch (Exception e) {
        log.error(&quot; JSON parsing failed: ${e.message}&quot;)
        println(&quot; JSON parsing failed: ${e.message}&quot;)  // print in CLI
        vars.put(&quot;authToken&quot;, &quot;AUTH_TOKEN_PARSE_ERROR&quot;)
    }
} else {
    log.error(&quot; No valid JSON response received for auth token extraction.&quot;)
    println(&quot; No valid JSON response received for auth token extraction.&quot;)  // print in CLI
    vars.put(&quot;authToken&quot;, &quot;AUTH_TOKEN_EMPTY_RESPONSE&quot;)
}

// Log the values
def divider = &quot;============================================================&quot;
def logText = &quot;&quot;&quot;
$divider
 JSR223 PostProcessor - Runtime Variable Log
------------------------------------------------------------
USERNAME used      : $username
PASSWORD used      : $password
AuthToken extracted: $authToken
$divider
&quot;&quot;&quot;

log.info(logText)   // visible in GUI logs
println(logText)    // visible in CLI when running with -n (non-GUI)

// Optional debug output in sampler response
prev.setSampleLabel(&quot;Log Key Runtime Values&quot;)

def output = &quot;&quot;&quot;
----------------- Runtime Variable Log -----------------

 USERNAME used      : $username
 PASSWORD used      : $password
 AuthToken extracted: $authToken

---------------------------------------------------------
&quot;&quot;&quot;
prev.setResponseData(output, &quot;UTF-8&quot;)

</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Registration and Delete" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${authToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create  Portfolio" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Portfolio" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/create</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;title&quot;: &quot;${PO_Title}&quot;,&#xd;
  &quot;description&quot;: &quot;${PO_Description}&quot;,&#xd;
  &quot;comments&quot;: &quot;${PO_Comments}&quot;,&#xd;
  &quot;parentId&quot;: null,&#xd;
  &quot;recordType&quot;: 0,&#xd;
  &quot;PortfolioId&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Dynamic Portfolio Data">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
import org.apache.commons.lang3.RandomStringUtils
import java.text.SimpleDateFormat
import java.util.Date

// Generate a 6-character alphanumeric suffix
def randomSuffix = RandomStringUtils.randomAlphanumeric(6).toUpperCase()

// Generate formatted timestamp
def timestamp = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date())

// Construct dynamic portfolio data
def poTitle = &quot;PerfPortfolio&quot; + randomSuffix
def poDescription = &quot;A portfolio that creates estimates for project Perf_Portfolio_&quot; + randomSuffix + &quot;.&quot;
def poComments = &quot;This is the portfolio you&apos;re currently viewing, created at &quot; + timestamp + &quot;.&quot;

// Store values in JMeter variables
vars.put(&quot;PO_Title&quot;, poTitle)
vars.put(&quot;PO_Description&quot;, poDescription)
vars.put(&quot;PO_Comments&quot;, poComments)

// Define reusable logger function
def logMessage = { label, value -&gt;
    def message = &quot;${label}: ${value}&quot;
    log.info(message)    // GUI + jmeter.log
    println(message)     // CLI + jmeter.log
}

// Log all variables
logMessage(&quot;Generated Portfolio Title&quot;, poTitle)
logMessage(&quot;Generated Portfolio Description&quot;, poDescription)
logMessage(&quot;Generated Portfolio Comments&quot;, poComments)
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
import groovy.json.JsonSlurper  

// === 1. Capture Pre-Processed Variables ===
def poTitle = vars.get(&quot;PO_Title&quot;) ?: &quot;PO_TITLE_NOT_SET&quot;
def poDescription = vars.get(&quot;PO_Description&quot;) ?: &quot;PO_DESCRIPTION_NOT_SET&quot;
def poComments = vars.get(&quot;PO_Comments&quot;) ?: &quot;PO_COMMENTS_NOT_SET&quot;

// === 2. Extract response and parse ===
def response = prev.getResponseDataAsString()
def portfolioId = &quot;PORTFOLIO_ID_NOT_EXTRACTED&quot;

if (response) {
    try {
        def json = new JsonSlurper().parseText(response)
        def responseTitle = json?.data?.title

        if (responseTitle == poTitle) {
            portfolioId = json?.data?.id?.toString()
            vars.put(&quot;portfolioId&quot;, portfolioId)
        } else {
            def msg = &quot;Title mismatch or missing in response.&quot;
            log.warn(msg)
            println(msg)
        }
    } catch (Exception e) {
        def msg = &quot;JSON parse error: &quot; + e.message
        log.error(msg, e)
        println(msg)
    }
} else {
    def msg = &quot;Response is empty&quot;
    log.warn(msg)
    println(msg)
}

// === 3. Log and show output ===
def payloadLog = &quot;&quot;&quot;
====================== RUNTIME DEBUG INFO ======================

&gt;&gt;&gt; PRE-PROCESSED INPUTS:
PO_Title       : $poTitle
PO_Description : $poDescription
PO_Comments    : $poComments

&gt;&gt;&gt; RESPONSE DATA:
Matched Title     : ${poTitle}
Extracted ID      : $portfolioId

================================================================
&quot;&quot;&quot;

// Print to JMeter GUI log
log.info(payloadLog)

// Print to console in non-GUI mode
println(payloadLog)

// Set sample label and response for better visibility in GUI
prev.setSampleLabel(&quot;Log Payload + portfolioId&quot;)
prev.setResponseData(payloadLog, &quot;UTF-8&quot;)

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Portfolio Project Composition" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;leftValue&quot;:1,&quot;offset&quot;:0,&quot;recordsPerPage&quot;:450,&quot;aggregateLevel&quot;:&quot;portfolio&quot;,&quot;expandedList&quot;:[],&quot;portfolioId&quot;:0,&quot;programmeId&quot;:0,&quot;schemeId&quot;:0}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Portfolio Expanded Portfolio Project Composition" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;leftValue&quot;:1,&quot;offset&quot;:0,&quot;recordsPerPage&quot;:450,&quot;aggregateLevel&quot;:&quot;portfolio&quot;,&quot;expandedList&quot;:[${portfolioId}],&quot;portfolioId&quot;:0,&quot;programmeId&quot;:0,&quot;schemeId&quot;:0}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Programme" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Programme" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/create</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;title&quot;:&quot;${PG_Title}&quot;,&quot;description&quot;:&quot;${PG_Description}&quot;,&quot;parentId&quot;:${portfolioId},&quot;recordType&quot;:1,&quot;PortfolioId&quot;:${portfolioId},&quot;comments&quot;:&quot;${PG_Comments}&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Dynamic Programme Data ">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Random
import java.util.UUID

// Generate a 3-digit random number suffix
def numericSuffix = String.format(&quot;%03d&quot;, new Random().nextInt(999))
// Generate a short unique ID (first 8 chars of UUID)
def randomSuffix = UUID.randomUUID().toString().take(8).toUpperCase()

// Current timestamp for log messages
def timestamp = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date())

// Construct dynamic Programme values
def programmeTitle = &quot;Perf_Programme_&quot; + numericSuffix
def programmeDescription = &quot;This is a dynamically generated description at &quot; + timestamp
def programmeComments = &quot;Auto-comment &quot; + randomSuffix

// Store values in JMeter variables
vars.put(&quot;PG_Title&quot;, programmeTitle)
vars.put(&quot;PG_Description&quot;, programmeDescription)
vars.put(&quot;PG_Comments&quot;, programmeComments)

// Reusable logger for GUI + CLI output
def logMessage = { label, value -&gt;
    def message = &quot;${label}: ${value}&quot;
    log.info(message)    // Appears in JMeter GUI log viewer and jmeter.log
    println(message)     // Appears in CLI output and jmeter.log
}

// Log all generated values
logMessage(&quot;Generated Programme Title&quot;, programmeTitle)
logMessage(&quot;Generated Programme Description&quot;, programmeDescription)
logMessage(&quot;Generated Programme Comments&quot;, programmeComments)
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
import groovy.json.JsonSlurper  

// === 1. Capture Pre-Processed Variables ===
def expectedTitle = vars.get(&quot;PG_Title&quot;) ?: &quot;PG_TITLE_NOT_SET&quot;
def expectedDescription = vars.get(&quot;PG_Description&quot;) ?: &quot;PG_DESCRIPTION_NOT_SET&quot;
def expectedComments = vars.get(&quot;PG_Comments&quot;) ?: &quot;PG_COMMENTS_NOT_SET&quot;

// === 2. Extract response and parse ===
def response = prev.getResponseDataAsString()
def programmeId = &quot;PROGRAMME_ID_NOT_EXTRACTED&quot;

if (response) {
    try {
        def json = new JsonSlurper().parseText(response)
        def responseTitle = json?.data?.title

        if (responseTitle == expectedTitle) {
            programmeId = json?.data?.id?.toString()
            vars.put(&quot;programmeId&quot;, programmeId)
        } else {
            def msg = &quot;Title mismatch or missing in response.&quot;
            log.warn(msg)
            println(msg)
        }
    } catch (Exception e) {
        def msg = &quot;JSON parse error: &quot; + e.message
        log.error(msg, e)
        println(msg)
    }
} else {
    def msg = &quot;Response is empty&quot;
    log.warn(msg)
    println(msg)
}

// === 3. Log and show output ===
def payloadLog = &quot;&quot;&quot;
====================== RUNTIME DEBUG INFO ======================

&gt;&gt;&gt; PRE-PROCESSED INPUTS:
PG_Title       : $expectedTitle
PG_Description : $expectedDescription
PG_Comments    : $expectedComments

&gt;&gt;&gt; RESPONSE DATA:
Matched Title     : $expectedTitle
Extracted ID      : $programmeId

================================================================
&quot;&quot;&quot;

// Print to JMeter GUI log
log.info(payloadLog)

// Print to console in non-GUI mode
println(payloadLog)

// Set sample label and response (for GUI visibility)
prev.setSampleLabel(&quot;Log Payload + programmeId&quot;)
prev.setResponseData(payloadLog, &quot;UTF-8&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Programme Project Composition" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;leftValue&quot;:1,&quot;offset&quot;:0,&quot;recordsPerPage&quot;:450,&quot;aggregateLevel&quot;:&quot;portfolio&quot;,&quot;expandedList&quot;:[${portfolioId}],&quot;portfolioId&quot;:0,&quot;programmeId&quot;:0,&quot;schemeId&quot;:0}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Expanded Programme Project Composition" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;leftValue&quot;:1,&quot;offset&quot;:0,&quot;recordsPerPage&quot;:450,&quot;aggregateLevel&quot;:&quot;programme&quot;,&quot;expandedList&quot;:[${portfolioId},${programmeId}],&quot;portfolioId&quot;:0,&quot;programmeId&quot;:0,&quot;schemeId&quot;:0}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Region" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common-v2/region/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Job Category" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common-v2/job-category/getAll</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Resource Type">
              <stringProp name="HTTPSampler.path">/api/v2/common-v2/resource-type/getAll</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Common Salutation" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common/salutation/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Country" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common-v2/country/getAll</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Common Unit" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common/unit/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Common Project type">
              <stringProp name="HTTPSampler.path">/api/v2/common/project-type/getAll</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Cost Code types" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common/cost-code-types/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Project Site Type" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common-v2/project-site-type/getAll</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Common Organization Types" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common/organization-types/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Common Depot" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common/depot/getall</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Common States" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/common/states/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Project" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Project" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/create</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;title&quot;: &quot;${PJ_Title}&quot;,&#xd;
  &quot;description&quot;: &quot;${PJ_Description}&quot;,&#xd;
  &quot;parentId&quot;: ${programmeId},&#xd;
  &quot;recordType&quot;: 2,&#xd;
  &quot;portfolioId&quot;: ${portfolioId},&#xd;
  &quot;CustomField&quot;: &quot;{\&quot;operationalPlan\&quot;:\&quot;\&quot;,\&quot;operationPlanversion\&quot;:\&quot;\&quot;,\&quot;capitalBaseline\&quot;:\&quot;\&quot;,\&quot;capitalBaselineVersion\&quot;:\&quot;\&quot;,\&quot;controlPeriod\&quot;:\&quot;\&quot;,\&quot;clientCode\&quot;:\&quot;\&quot;,\&quot;clientType\&quot;:\&quot;\&quot;,\&quot;clientCompany\&quot;:\&quot;\&quot;,\&quot;principalCode\&quot;:\&quot;\&quot;,\&quot;principalType\&quot;:\&quot;\&quot;,\&quot;principalCompany\&quot;:\&quot;\&quot;}&quot;,&#xd;
  &quot;project&quot;: {&#xd;
    &quot;projectQuoteNo&quot;: &quot;${PJ_QuoteNo}&quot;,&#xd;
    &quot;projectDate&quot;: &quot;2024-01-16T18:30:00.000Z&quot;,&#xd;
    &quot;projectEndDate&quot;: &quot;2024-01-30T18:30:00.000Z&quot;,&#xd;
    &quot;projectMapRef&quot;: &quot;&quot;,&#xd;
    &quot;projectLocation&quot;: &quot;&quot;,&#xd;
    &quot;projectSuburb&quot;: &quot;&quot;,&#xd;
    &quot;projectPostcode&quot;: &quot;&quot;,&#xd;
    &quot;jobCategoryId&quot;: 1,&#xd;
    &quot;depotId&quot;: 5,&#xd;
    &quot;projectTypeId&quot;: 1,&#xd;
    &quot;projectSiteTypeId&quot;: 1,&#xd;
    &quot;organisationId&quot;: &quot;&quot;,&#xd;
    &quot;regionId&quot;: &quot;&quot;,&#xd;
    &quot;projectComments&quot;: &quot;&quot;,&#xd;
    &quot;projectKeywords&quot;: &quot;&quot;,&#xd;
    &quot;projectNotes&quot;: &quot;&quot;,&#xd;
    &quot;stateId&quot;: &quot;&quot;,&#xd;
    &quot;projectSalutationId&quot;: &quot;&quot;,&#xd;
    &quot;projectCustomClientContact&quot;: &quot;&quot;,&#xd;
    &quot;projectCustomClientContactPhone&quot;: &quot;&quot;,&#xd;
    &quot;projectCustomClientContactFax&quot;: &quot;&quot;,&#xd;
    &quot;projectCustomClientContactMobile&quot;: &quot;&quot;,&#xd;
    &quot;projectCustomClientContactEmail&quot;: &quot;&quot;,&#xd;
    &quot;scope&quot;: &quot;&quot;,&#xd;
    &quot;deliverables&quot;: &quot;&quot;,&#xd;
    &quot;standardConditions&quot;: &quot;&quot;,&#xd;
    &quot;projectSpecificConditions&quot;: &quot;&quot;,&#xd;
    &quot;paymentTermsConditionsCode&quot;: &quot;&quot;,&#xd;
    &quot;paymentTermsConditionsDescription&quot;: &quot;&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Dynamic Project Data ">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Random

// Generate a unique 3-digit suffix
def suffix = String.format(&quot;%03d&quot;, new Random().nextInt(999))

// Timestamp for logging context
def timestamp = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date())

// Construct project-related fields
def projectTitle = &quot;Perf_Project_&quot; + suffix
def projectDescription = &quot;Test project description for automation &quot; + suffix
def quoteNo = &quot;QNO-&quot; + suffix
def projectComments = &quot;Generated automatically at &quot; + timestamp

// Store values in JMeter variables
vars.put(&quot;PJ_Title&quot;, projectTitle)
vars.put(&quot;PJ_Description&quot;, projectDescription)
vars.put(&quot;PJ_QuoteNo&quot;, quoteNo)
vars.put(&quot;PJ_Comments&quot;, projectComments)

// Logging function for both CLI and GUI
def logMessage = { label, value -&gt;
    def message = &quot;${label}: ${value}&quot;
    log.info(message)    // Visible in GUI log viewer and jmeter.log
    println(message)     // Visible in CLI and jmeter.log
}

// Log all generated values
logMessage(&quot;Generated Project Title&quot;, projectTitle)
logMessage(&quot;Generated Project Description&quot;, projectDescription)
logMessage(&quot;Generated Project Quote No&quot;, quoteNo)
logMessage(&quot;Generated Project Comments&quot;, projectComments)

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
import groovy.json.JsonSlurper 

// === 1. Get the response from the previous sampler ===
def response = prev.getResponseDataAsString()
def projectId = &quot;PROJECT_ID_NOT_EXTRACTED&quot;

// === 2. Get Pre-Processor variables ===
def expectedTitle       = vars.get(&quot;PJ_Title&quot;) ?: &quot;PJ_TITLE_NOT_SET&quot;
def expectedDescription = vars.get(&quot;PJ_Description&quot;) ?: &quot;PJ_DESCRIPTION_NOT_SET&quot;
def expectedQuoteNo     = vars.get(&quot;PJ_QuoteNo&quot;) ?: &quot;PJ_QUOTE_NO_NOT_SET&quot;
def expectedComments    = vars.get(&quot;PJ_Comments&quot;) ?: &quot;PJ_COMMENTS_NOT_SET&quot;

if (response) {
    try {
        def json = new JsonSlurper().parseText(response)
        def responseTitle = json?.data?.title

        if (responseTitle == expectedTitle) {
            projectId = json?.data?.id?.toString()
            vars.put(&quot;projectId&quot;, projectId)
        } else {
            def msg = &quot;Title mismatch or missing in response.&quot;
            log.warn(msg)
            println(msg)
        }
    } catch (Exception e) {
        def msg = &quot;JSON parsing failed: &quot; + e.message
        log.error(msg, e)
        println(msg)
    }
} else {
    def msg = &quot;Empty response received.&quot;
    log.warn(msg)
    println(msg)
}

// === 3. Build log block for debug output ===
def logOutput = &quot;&quot;&quot;
====================== RUNTIME DEBUG INFO ======================

&gt;&gt;&gt; PRE-PROCESSOR GENERATED PROJECT DATA:
PJ_Title       : $expectedTitle
PJ_Description : $expectedDescription
PJ_QuoteNo     : $expectedQuoteNo
PJ_Comments    : $expectedComments

&gt;&gt;&gt; RESPONSE VERIFICATION:
Matched Title  : $expectedTitle
Extracted ID   : $projectId

================================================================
&quot;&quot;&quot;

// === 4. Print to JMeter GUI log and Console (non-GUI) ===
log.info(logOutput)
println(logOutput)

// === 5. Set response data and label for GUI mode ===
prev.setSampleLabel(&quot;Log Project Payload + ID&quot;)
prev.setResponseData(logOutput, &quot;UTF-8&quot;)

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project Project Composition" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;leftValue&quot;:1,&quot;offset&quot;:0,&quot;recordsPerPage&quot;:450,&quot;aggregateLevel&quot;:&quot;programme&quot;,&quot;expandedList&quot;:[${portfolioId},${programmeId}],&quot;portfolioId&quot;:0,&quot;programmeId&quot;:0,&quot;schemeId&quot;:0}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project Composition estimates" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get/estimates/${projectId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Project" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project Delete" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/delete/${projectId}?type=project</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project Composition" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;leftValue&quot;:1,&quot;offset&quot;:0,&quot;recordsPerPage&quot;:450,&quot;aggregateLevel&quot;:&quot;programme&quot;,&quot;expandedList&quot;:[${portfolioId},${programmeId}],&quot;portfolioId&quot;:0,&quot;programmeId&quot;:0,&quot;schemeId&quot;:0}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
// === 1. Banner for Deletion Start === 
def projectId = vars.get(&quot;projectId&quot;)
def logHeader = &quot;&quot;&quot;
==================== Deleting Project ====================
&quot;&quot;&quot;

log.info(logHeader)
println(logHeader)

log.info(&quot;Project ID: &quot; + projectId)
println(&quot;Project ID: &quot; + projectId)

// === 2. Validate projectId ===
if (projectId == null || projectId.trim().isEmpty()) {
    def errorMsg = &quot;&quot;&quot;
==================== ERROR ====================
Project ID is missing or empty.
Skipping the delete request to avoid invalid operation.
================================================
&quot;&quot;&quot;

    log.error(errorMsg)
    println(errorMsg)

    SampleResult.setSuccessful(false)  // Mark sampler as failed
    prev.setResponseData(errorMsg, &quot;UTF-8&quot;)
    prev.setSampleLabel(&quot;Project Delete Failed&quot;)
} else {
    // === 3. Proceed with deletion ===
    def successMsg = &quot;&quot;&quot;
==================== VALIDATION PASSED ====================
Project ID found: $projectId
Proceeding with project deletion request...
============================================================
&quot;&quot;&quot;

    log.info(successMsg)
    println(successMsg)

    // [Insert actual DELETE logic or HTTP sampler configuration here]

    def completeMsg = &quot;&quot;&quot;
==================== DELETION COMPLETED ====================
Project with ID $projectId marked for deletion.
============================================================
&quot;&quot;&quot;
    log.info(completeMsg)
    println(completeMsg)

    prev.setResponseData(completeMsg, &quot;UTF-8&quot;)
    prev.setSampleLabel(&quot;Project Delete Initiated&quot;)
}
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Programme" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Programme Delete" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/delete/${programmeId}?type=programme</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project Composition" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;leftValue&quot;:1,&quot;offset&quot;:0,&quot;recordsPerPage&quot;:450,&quot;aggregateLevel&quot;:&quot;portfolio&quot;,&quot;expandedList&quot;:[${portfolioId}],&quot;portfolioId&quot;:0,&quot;programmeId&quot;:0,&quot;schemeId&quot;:0}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
// === 1. Initialize &amp; Log Header === 
def programmeId = vars.get(&quot;programmeId&quot;)
def logHeader = &quot;&quot;&quot;
==================== Deleting Programme ====================
&quot;&quot;&quot;

log.info(logHeader)
println(logHeader)

log.info(&quot;Programme ID: &quot; + programmeId)
println(&quot;Programme ID: &quot; + programmeId)

// === 2. Validate programmeId ===
if (programmeId == null || programmeId.trim().isEmpty()) {
    def errorMsg = &quot;&quot;&quot;
==================== ERROR ====================
Programme ID is missing or empty.
Skipping the delete request to avoid invalid operation.
================================================
&quot;&quot;&quot;
    log.error(errorMsg)
    println(errorMsg)

    SampleResult.setSuccessful(false)  // Mark sampler as failed
    prev.setResponseData(errorMsg, &quot;UTF-8&quot;)
    prev.setSampleLabel(&quot;Programme Delete Failed&quot;)
} else {
    // === 3. Proceed with deletion ===
    def successMsg = &quot;&quot;&quot;
==================== VALIDATION PASSED ====================
Programme ID found: $programmeId
Proceeding with programme deletion request...
============================================================
&quot;&quot;&quot;
    log.info(successMsg)
    println(successMsg)

    // [Insert actual DELETE logic or HTTP sampler configuration here]

    def completeMsg = &quot;&quot;&quot;
==================== DELETION COMPLETED ====================
Programme with ID $programmeId marked for deletion.
============================================================
&quot;&quot;&quot;
    log.info(completeMsg)
    println(completeMsg)

    prev.setResponseData(completeMsg, &quot;UTF-8&quot;)
    prev.setSampleLabel(&quot;Programme Delete Initiated&quot;)
}
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Portfolio" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Portfolio Delete" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/delete/${portfolioId}?type=portfolio</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project Composition" enabled="true">
              <stringProp name="HTTPSampler.path">/api/v2/project-composition/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;leftValue&quot;:1,&quot;offset&quot;:0,&quot;recordsPerPage&quot;:450,&quot;aggregateLevel&quot;:&quot;portfolio&quot;,&quot;expandedList&quot;:[${portfolioId}],&quot;portfolioId&quot;:0,&quot;programmeId&quot;:0,&quot;schemeId&quot;:0}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
// === 1. Setup &amp; Initial Logging === 
def portfolioId = vars.get(&quot;portfolioId&quot;)
def logHeader = &quot;&quot;&quot;
==================== Deleting Portfolio ====================
&quot;&quot;&quot;

log.info(logHeader)
println(logHeader)

log.info(&quot;Portfolio ID: &quot; + portfolioId)
println(&quot;Portfolio ID: &quot; + portfolioId)

// === 2. Validate Portfolio ID ===
if (portfolioId == null || portfolioId.trim().isEmpty()) {
    def errorMsg = &quot;&quot;&quot;
==================== ERROR ====================
Portfolio ID is missing or empty.
Skipping delete request to prevent invalid operation.
================================================
&quot;&quot;&quot;
    log.error(errorMsg)
    println(errorMsg)

    SampleResult.setSuccessful(false)  // Fail the sampler
    prev.setResponseData(errorMsg, &quot;UTF-8&quot;)
    prev.setSampleLabel(&quot;Portfolio Delete Failed&quot;)
} else {
    // === 3. Proceed with deletion ===
    def successMsg = &quot;&quot;&quot;
==================== VALIDATION PASSED ====================
Portfolio ID found: $portfolioId
Proceeding with portfolio deletion request...
============================================================
&quot;&quot;&quot;
    log.info(successMsg)
    println(successMsg)

    // [Insert actual DELETE logic or trigger sampler here]

    def completeMsg = &quot;&quot;&quot;
==================== DELETION COMPLETED ====================
Portfolio with ID $portfolioId marked for deletion.
============================================================
&quot;&quot;&quot;
    log.info(completeMsg)
    println(completeMsg)

    prev.setResponseData(completeMsg, &quot;UTF-8&quot;)
    prev.setSampleLabel(&quot;Portfolio Delete Initiated&quot;)
}
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
